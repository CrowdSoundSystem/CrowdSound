syntax = "proto3";

option go_package = "crowdsound";

package CrowdSound;

service Admin {
    rpc SkipStatus(SkipStatusRequest) returns (SkipStatusResponse) {}
    rpc Skip(SkipRequest) returns (SkipResponse) {}

    rpc GetSettings(GetSettingsRequest) returns (GetSettingsResponse) {}
    rpc SetSetting(SetSettingRequest) returns (SetSettingResponse) {}

    rpc GetVersionInfo(GetVersionInfoRequest) returns (GetVersionInfoResponse) {}
    rpc GetDBStats(GetDBStatsRequest) returns (GetDBStatsResponse) {}
}

message SkipStatusRequest {
}

message SkipStatusResponse {
    int32 votes_to_skip = 1;
    int32 total_users = 2;
    float threshold = 3;
}

message SkipRequest {
}

message SkipResponse {
}

message GetSettingsRequest {
}

message GetSettingsResponse {
    bool filter_buffered = 1;
    int32 inactivity_threshold = 2;
    int32 result_limit = 3;

    string session_name = 4;
    int32 queue_size = 5;
    int32 trending_artists_size = 6;
    float skip_threshold = 7;

    float count_weight = 8;
    float vote_weight = 9;
    float genre_weight = 10;
    float artist_weight = 11;
    float played_again_mult = 12;
    float min_repeat_window = 13;
}

message SetSettingRequest {
    string key = 1;

    oneof value {
        bool   bool_val  = 2;
        string str_val   = 3;
        int32  int_val   = 4;
        float  float_val = 5;
    }
}

message SetSettingResponse {
}

message GetVersionInfoRequest {
}

message GetVersionInfoResponse {
    string crowdsound_version = 1;
    string playsource_version = 2;
    string algorithm_version = 3;
    string skrillex_version = 4;
    string grpc_version = 5;
}

message GetDBStatsRequest {
}

message GetDBStatsResponse {
    int32 num_songs = 1;
    int32 num_artists = 2;
    int32 num_genres = 3;
}

