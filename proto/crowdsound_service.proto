syntax = "proto3";

option java_package = "ex.grpc";
option objc_class_prefix = "CS";
option go_package = "crowdsound";

package CrowdSound;

// Interface exported by the server.
service CrowdSound {
    // Ping sends a ping to the server to indicate the client is
    // alive and connected.
    rpc Ping(PingRequest) returns (PingResponse) {}

    rpc GetSessionData(GetSessionDataRequest) returns (GetSessionDataResponse) {}

    // GetPlaying returns the current song that is playing.
    rpc GetPlaying(GetPlayingRequest) returns (GetPlayingResponse) {}

    // GetQueue streams the queue of songs.
    rpc GetQueue(GetQueueRequest) returns (stream GetQueueResponse) {}

    // ListTrendingArtists returns an ordered list of artists, based on trending
    // value.
    //
    // As with ListSongs, it is up to the client to control pagination and stream
    // termination (with the exception of end-of-stream).
    rpc ListTrendingArtists(ListTrendingArtistsRequest) returns (stream ListTrendingArtistsResponse) {}

    // PostSong informs the CrowdSound service of a 'Song' that the client
    // has. The 'Song' may or may not have all of the fields filled or present.
    rpc PostSong(stream PostSongRequest) returns (PostSongResponse) {}

    // VoteSong informs the CrowdSound service of a vote for a Song.
    rpc VoteSong(VoteSongRequest) returns (VoteSongResponse) {}

    // VoteSkip votes to skip the currently playing song.
    rpc VoteSkip(VoteSkipRequest) returns (VoteSkipResponse) {}
}

message PingRequest {
    string user_id = 1;
}

message PingResponse {
}

message GetSessionDataRequest {
}

message GetSessionDataResponse {
    string session_name = 1;
    int32  num_users = 2;
}

message GetPlayingRequest {
}

message GetPlayingResponse {
    string name = 1;
    string artist = 2;
    string genre = 3;
}

message GetQueueRequest {
    string user_id = 1;
}

message GetQueueResponse {
    string name = 1;
    string artist = 2;
    string genre = 3;

    bool isPlaying = 4;
    bool isBuffered = 5;
}

message ListTrendingArtistsRequest {
}

message ListTrendingArtistsResponse {
    string name = 1;
    int32 score = 2;
}

message PostSongRequest {
    string user_id = 1;
    string name = 2;
    repeated string artist = 3;
    string genre = 4;
}

message PostSongResponse {
}

message VoteSongRequest {
    string user_id = 1;
    string name = 2;
    string artist = 3;
    bool like = 4;
}

message VoteSongResponse {
}

message VoteSkipRequest {
    string user_id = 1;
}

message VoteSkipResponse {
}
