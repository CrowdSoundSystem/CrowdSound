// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/crowdsound_admin_service.proto

#ifndef PROTOBUF_proto_2fcrowdsound_5fadmin_5fservice_2eproto__INCLUDED
#define PROTOBUF_proto_2fcrowdsound_5fadmin_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace CrowdSound {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fcrowdsound_5fadmin_5fservice_2eproto();
void protobuf_AssignDesc_proto_2fcrowdsound_5fadmin_5fservice_2eproto();
void protobuf_ShutdownFile_proto_2fcrowdsound_5fadmin_5fservice_2eproto();

class SkipRequest;
class SkipResponse;
class SkipStatusRequest;
class SkipStatusResponse;

// ===================================================================

class SkipStatusRequest : public ::google::protobuf::Message {
 public:
  SkipStatusRequest();
  virtual ~SkipStatusRequest();

  SkipStatusRequest(const SkipStatusRequest& from);

  inline SkipStatusRequest& operator=(const SkipStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkipStatusRequest& default_instance();

  void Swap(SkipStatusRequest* other);

  // implements Message ----------------------------------------------

  inline SkipStatusRequest* New() const { return New(NULL); }

  SkipStatusRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkipStatusRequest& from);
  void MergeFrom(const SkipStatusRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SkipStatusRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CrowdSound.SkipStatusRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fcrowdsound_5fadmin_5fservice_2eproto();
  friend void protobuf_AssignDesc_proto_2fcrowdsound_5fadmin_5fservice_2eproto();
  friend void protobuf_ShutdownFile_proto_2fcrowdsound_5fadmin_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SkipStatusRequest* default_instance_;
};
// -------------------------------------------------------------------

class SkipStatusResponse : public ::google::protobuf::Message {
 public:
  SkipStatusResponse();
  virtual ~SkipStatusResponse();

  SkipStatusResponse(const SkipStatusResponse& from);

  inline SkipStatusResponse& operator=(const SkipStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkipStatusResponse& default_instance();

  void Swap(SkipStatusResponse* other);

  // implements Message ----------------------------------------------

  inline SkipStatusResponse* New() const { return New(NULL); }

  SkipStatusResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkipStatusResponse& from);
  void MergeFrom(const SkipStatusResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SkipStatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 votes_to_skip = 1;
  void clear_votes_to_skip();
  static const int kVotesToSkipFieldNumber = 1;
  ::google::protobuf::int32 votes_to_skip() const;
  void set_votes_to_skip(::google::protobuf::int32 value);

  // optional int32 total_users = 2;
  void clear_total_users();
  static const int kTotalUsersFieldNumber = 2;
  ::google::protobuf::int32 total_users() const;
  void set_total_users(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CrowdSound.SkipStatusResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 votes_to_skip_;
  ::google::protobuf::int32 total_users_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fcrowdsound_5fadmin_5fservice_2eproto();
  friend void protobuf_AssignDesc_proto_2fcrowdsound_5fadmin_5fservice_2eproto();
  friend void protobuf_ShutdownFile_proto_2fcrowdsound_5fadmin_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SkipStatusResponse* default_instance_;
};
// -------------------------------------------------------------------

class SkipRequest : public ::google::protobuf::Message {
 public:
  SkipRequest();
  virtual ~SkipRequest();

  SkipRequest(const SkipRequest& from);

  inline SkipRequest& operator=(const SkipRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkipRequest& default_instance();

  void Swap(SkipRequest* other);

  // implements Message ----------------------------------------------

  inline SkipRequest* New() const { return New(NULL); }

  SkipRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkipRequest& from);
  void MergeFrom(const SkipRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SkipRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CrowdSound.SkipRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fcrowdsound_5fadmin_5fservice_2eproto();
  friend void protobuf_AssignDesc_proto_2fcrowdsound_5fadmin_5fservice_2eproto();
  friend void protobuf_ShutdownFile_proto_2fcrowdsound_5fadmin_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SkipRequest* default_instance_;
};
// -------------------------------------------------------------------

class SkipResponse : public ::google::protobuf::Message {
 public:
  SkipResponse();
  virtual ~SkipResponse();

  SkipResponse(const SkipResponse& from);

  inline SkipResponse& operator=(const SkipResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkipResponse& default_instance();

  void Swap(SkipResponse* other);

  // implements Message ----------------------------------------------

  inline SkipResponse* New() const { return New(NULL); }

  SkipResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkipResponse& from);
  void MergeFrom(const SkipResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SkipResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CrowdSound.SkipResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fcrowdsound_5fadmin_5fservice_2eproto();
  friend void protobuf_AssignDesc_proto_2fcrowdsound_5fadmin_5fservice_2eproto();
  friend void protobuf_ShutdownFile_proto_2fcrowdsound_5fadmin_5fservice_2eproto();

  void InitAsDefaultInstance();
  static SkipResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SkipStatusRequest

// -------------------------------------------------------------------

// SkipStatusResponse

// optional int32 votes_to_skip = 1;
inline void SkipStatusResponse::clear_votes_to_skip() {
  votes_to_skip_ = 0;
}
inline ::google::protobuf::int32 SkipStatusResponse::votes_to_skip() const {
  // @@protoc_insertion_point(field_get:CrowdSound.SkipStatusResponse.votes_to_skip)
  return votes_to_skip_;
}
inline void SkipStatusResponse::set_votes_to_skip(::google::protobuf::int32 value) {
  
  votes_to_skip_ = value;
  // @@protoc_insertion_point(field_set:CrowdSound.SkipStatusResponse.votes_to_skip)
}

// optional int32 total_users = 2;
inline void SkipStatusResponse::clear_total_users() {
  total_users_ = 0;
}
inline ::google::protobuf::int32 SkipStatusResponse::total_users() const {
  // @@protoc_insertion_point(field_get:CrowdSound.SkipStatusResponse.total_users)
  return total_users_;
}
inline void SkipStatusResponse::set_total_users(::google::protobuf::int32 value) {
  
  total_users_ = value;
  // @@protoc_insertion_point(field_set:CrowdSound.SkipStatusResponse.total_users)
}

// -------------------------------------------------------------------

// SkipRequest

// -------------------------------------------------------------------

// SkipResponse

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CrowdSound

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fcrowdsound_5fadmin_5fservice_2eproto__INCLUDED
