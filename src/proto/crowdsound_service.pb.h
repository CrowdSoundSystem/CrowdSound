// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/crowdsound_service.proto

#ifndef PROTOBUF_proto_2fcrowdsound_5fservice_2eproto__INCLUDED
#define PROTOBUF_proto_2fcrowdsound_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace CrowdSound {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
void protobuf_AssignDesc_proto_2fcrowdsound_5fservice_2eproto();
void protobuf_ShutdownFile_proto_2fcrowdsound_5fservice_2eproto();

class GetQueueRequest;
class GetQueueResponse;
class GetSessionDataRequest;
class GetSessionDataResponse;
class ListTrendingArtistsRequest;
class ListTrendingArtistsResponse;
class PingRequest;
class PingResponse;
class PostSongRequest;
class PostSongResponse;
class VoteSkipRequest;
class VoteSkipResponse;
class VoteSongRequest;
class VoteSongResponse;

// ===================================================================

class PingRequest : public ::google::protobuf::Message {
 public:
  PingRequest();
  virtual ~PingRequest();

  PingRequest(const PingRequest& from);

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PingRequest& default_instance();

  void Swap(PingRequest* other);

  // implements Message ----------------------------------------------

  inline PingRequest* New() const { return New(NULL); }

  PingRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PingRequest& from);
  void MergeFrom(const PingRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:CrowdSound.PingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_AssignDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_ShutdownFile_proto_2fcrowdsound_5fservice_2eproto();

  void InitAsDefaultInstance();
  static PingRequest* default_instance_;
};
// -------------------------------------------------------------------

class PingResponse : public ::google::protobuf::Message {
 public:
  PingResponse();
  virtual ~PingResponse();

  PingResponse(const PingResponse& from);

  inline PingResponse& operator=(const PingResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PingResponse& default_instance();

  void Swap(PingResponse* other);

  // implements Message ----------------------------------------------

  inline PingResponse* New() const { return New(NULL); }

  PingResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PingResponse& from);
  void MergeFrom(const PingResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CrowdSound.PingResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_AssignDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_ShutdownFile_proto_2fcrowdsound_5fservice_2eproto();

  void InitAsDefaultInstance();
  static PingResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetSessionDataRequest : public ::google::protobuf::Message {
 public:
  GetSessionDataRequest();
  virtual ~GetSessionDataRequest();

  GetSessionDataRequest(const GetSessionDataRequest& from);

  inline GetSessionDataRequest& operator=(const GetSessionDataRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSessionDataRequest& default_instance();

  void Swap(GetSessionDataRequest* other);

  // implements Message ----------------------------------------------

  inline GetSessionDataRequest* New() const { return New(NULL); }

  GetSessionDataRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSessionDataRequest& from);
  void MergeFrom(const GetSessionDataRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetSessionDataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CrowdSound.GetSessionDataRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_AssignDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_ShutdownFile_proto_2fcrowdsound_5fservice_2eproto();

  void InitAsDefaultInstance();
  static GetSessionDataRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetSessionDataResponse : public ::google::protobuf::Message {
 public:
  GetSessionDataResponse();
  virtual ~GetSessionDataResponse();

  GetSessionDataResponse(const GetSessionDataResponse& from);

  inline GetSessionDataResponse& operator=(const GetSessionDataResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSessionDataResponse& default_instance();

  void Swap(GetSessionDataResponse* other);

  // implements Message ----------------------------------------------

  inline GetSessionDataResponse* New() const { return New(NULL); }

  GetSessionDataResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSessionDataResponse& from);
  void MergeFrom(const GetSessionDataResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetSessionDataResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string session_name = 1;
  void clear_session_name();
  static const int kSessionNameFieldNumber = 1;
  const ::std::string& session_name() const;
  void set_session_name(const ::std::string& value);
  void set_session_name(const char* value);
  void set_session_name(const char* value, size_t size);
  ::std::string* mutable_session_name();
  ::std::string* release_session_name();
  void set_allocated_session_name(::std::string* session_name);

  // optional int32 num_users = 2;
  void clear_num_users();
  static const int kNumUsersFieldNumber = 2;
  ::google::protobuf::int32 num_users() const;
  void set_num_users(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CrowdSound.GetSessionDataResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr session_name_;
  ::google::protobuf::int32 num_users_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_AssignDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_ShutdownFile_proto_2fcrowdsound_5fservice_2eproto();

  void InitAsDefaultInstance();
  static GetSessionDataResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetQueueRequest : public ::google::protobuf::Message {
 public:
  GetQueueRequest();
  virtual ~GetQueueRequest();

  GetQueueRequest(const GetQueueRequest& from);

  inline GetQueueRequest& operator=(const GetQueueRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetQueueRequest& default_instance();

  void Swap(GetQueueRequest* other);

  // implements Message ----------------------------------------------

  inline GetQueueRequest* New() const { return New(NULL); }

  GetQueueRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetQueueRequest& from);
  void MergeFrom(const GetQueueRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetQueueRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:CrowdSound.GetQueueRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_AssignDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_ShutdownFile_proto_2fcrowdsound_5fservice_2eproto();

  void InitAsDefaultInstance();
  static GetQueueRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetQueueResponse : public ::google::protobuf::Message {
 public:
  GetQueueResponse();
  virtual ~GetQueueResponse();

  GetQueueResponse(const GetQueueResponse& from);

  inline GetQueueResponse& operator=(const GetQueueResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetQueueResponse& default_instance();

  void Swap(GetQueueResponse* other);

  // implements Message ----------------------------------------------

  inline GetQueueResponse* New() const { return New(NULL); }

  GetQueueResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetQueueResponse& from);
  void MergeFrom(const GetQueueResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetQueueResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string artist = 2;
  void clear_artist();
  static const int kArtistFieldNumber = 2;
  const ::std::string& artist() const;
  void set_artist(const ::std::string& value);
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  ::std::string* mutable_artist();
  ::std::string* release_artist();
  void set_allocated_artist(::std::string* artist);

  // optional string genre = 3;
  void clear_genre();
  static const int kGenreFieldNumber = 3;
  const ::std::string& genre() const;
  void set_genre(const ::std::string& value);
  void set_genre(const char* value);
  void set_genre(const char* value, size_t size);
  ::std::string* mutable_genre();
  ::std::string* release_genre();
  void set_allocated_genre(::std::string* genre);

  // optional bool isPlaying = 4;
  void clear_isplaying();
  static const int kIsPlayingFieldNumber = 4;
  bool isplaying() const;
  void set_isplaying(bool value);

  // optional bool isBuffered = 5;
  void clear_isbuffered();
  static const int kIsBufferedFieldNumber = 5;
  bool isbuffered() const;
  void set_isbuffered(bool value);

  // @@protoc_insertion_point(class_scope:CrowdSound.GetQueueResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr artist_;
  ::google::protobuf::internal::ArenaStringPtr genre_;
  bool isplaying_;
  bool isbuffered_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_AssignDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_ShutdownFile_proto_2fcrowdsound_5fservice_2eproto();

  void InitAsDefaultInstance();
  static GetQueueResponse* default_instance_;
};
// -------------------------------------------------------------------

class ListTrendingArtistsRequest : public ::google::protobuf::Message {
 public:
  ListTrendingArtistsRequest();
  virtual ~ListTrendingArtistsRequest();

  ListTrendingArtistsRequest(const ListTrendingArtistsRequest& from);

  inline ListTrendingArtistsRequest& operator=(const ListTrendingArtistsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTrendingArtistsRequest& default_instance();

  void Swap(ListTrendingArtistsRequest* other);

  // implements Message ----------------------------------------------

  inline ListTrendingArtistsRequest* New() const { return New(NULL); }

  ListTrendingArtistsRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListTrendingArtistsRequest& from);
  void MergeFrom(const ListTrendingArtistsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListTrendingArtistsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CrowdSound.ListTrendingArtistsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_AssignDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_ShutdownFile_proto_2fcrowdsound_5fservice_2eproto();

  void InitAsDefaultInstance();
  static ListTrendingArtistsRequest* default_instance_;
};
// -------------------------------------------------------------------

class ListTrendingArtistsResponse : public ::google::protobuf::Message {
 public:
  ListTrendingArtistsResponse();
  virtual ~ListTrendingArtistsResponse();

  ListTrendingArtistsResponse(const ListTrendingArtistsResponse& from);

  inline ListTrendingArtistsResponse& operator=(const ListTrendingArtistsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTrendingArtistsResponse& default_instance();

  void Swap(ListTrendingArtistsResponse* other);

  // implements Message ----------------------------------------------

  inline ListTrendingArtistsResponse* New() const { return New(NULL); }

  ListTrendingArtistsResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListTrendingArtistsResponse& from);
  void MergeFrom(const ListTrendingArtistsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListTrendingArtistsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 score = 2;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  ::google::protobuf::int32 score() const;
  void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CrowdSound.ListTrendingArtistsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 score_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_AssignDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_ShutdownFile_proto_2fcrowdsound_5fservice_2eproto();

  void InitAsDefaultInstance();
  static ListTrendingArtistsResponse* default_instance_;
};
// -------------------------------------------------------------------

class PostSongRequest : public ::google::protobuf::Message {
 public:
  PostSongRequest();
  virtual ~PostSongRequest();

  PostSongRequest(const PostSongRequest& from);

  inline PostSongRequest& operator=(const PostSongRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PostSongRequest& default_instance();

  void Swap(PostSongRequest* other);

  // implements Message ----------------------------------------------

  inline PostSongRequest* New() const { return New(NULL); }

  PostSongRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PostSongRequest& from);
  void MergeFrom(const PostSongRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PostSongRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated string artist = 3;
  int artist_size() const;
  void clear_artist();
  static const int kArtistFieldNumber = 3;
  const ::std::string& artist(int index) const;
  ::std::string* mutable_artist(int index);
  void set_artist(int index, const ::std::string& value);
  void set_artist(int index, const char* value);
  void set_artist(int index, const char* value, size_t size);
  ::std::string* add_artist();
  void add_artist(const ::std::string& value);
  void add_artist(const char* value);
  void add_artist(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& artist() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_artist();

  // optional string genre = 4;
  void clear_genre();
  static const int kGenreFieldNumber = 4;
  const ::std::string& genre() const;
  void set_genre(const ::std::string& value);
  void set_genre(const char* value);
  void set_genre(const char* value, size_t size);
  ::std::string* mutable_genre();
  ::std::string* release_genre();
  void set_allocated_genre(::std::string* genre);

  // @@protoc_insertion_point(class_scope:CrowdSound.PostSongRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> artist_;
  ::google::protobuf::internal::ArenaStringPtr genre_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_AssignDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_ShutdownFile_proto_2fcrowdsound_5fservice_2eproto();

  void InitAsDefaultInstance();
  static PostSongRequest* default_instance_;
};
// -------------------------------------------------------------------

class PostSongResponse : public ::google::protobuf::Message {
 public:
  PostSongResponse();
  virtual ~PostSongResponse();

  PostSongResponse(const PostSongResponse& from);

  inline PostSongResponse& operator=(const PostSongResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PostSongResponse& default_instance();

  void Swap(PostSongResponse* other);

  // implements Message ----------------------------------------------

  inline PostSongResponse* New() const { return New(NULL); }

  PostSongResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PostSongResponse& from);
  void MergeFrom(const PostSongResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PostSongResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CrowdSound.PostSongResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_AssignDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_ShutdownFile_proto_2fcrowdsound_5fservice_2eproto();

  void InitAsDefaultInstance();
  static PostSongResponse* default_instance_;
};
// -------------------------------------------------------------------

class VoteSongRequest : public ::google::protobuf::Message {
 public:
  VoteSongRequest();
  virtual ~VoteSongRequest();

  VoteSongRequest(const VoteSongRequest& from);

  inline VoteSongRequest& operator=(const VoteSongRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteSongRequest& default_instance();

  void Swap(VoteSongRequest* other);

  // implements Message ----------------------------------------------

  inline VoteSongRequest* New() const { return New(NULL); }

  VoteSongRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoteSongRequest& from);
  void MergeFrom(const VoteSongRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VoteSongRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string artist = 3;
  void clear_artist();
  static const int kArtistFieldNumber = 3;
  const ::std::string& artist() const;
  void set_artist(const ::std::string& value);
  void set_artist(const char* value);
  void set_artist(const char* value, size_t size);
  ::std::string* mutable_artist();
  ::std::string* release_artist();
  void set_allocated_artist(::std::string* artist);

  // optional bool like = 4;
  void clear_like();
  static const int kLikeFieldNumber = 4;
  bool like() const;
  void set_like(bool value);

  // @@protoc_insertion_point(class_scope:CrowdSound.VoteSongRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr artist_;
  bool like_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_AssignDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_ShutdownFile_proto_2fcrowdsound_5fservice_2eproto();

  void InitAsDefaultInstance();
  static VoteSongRequest* default_instance_;
};
// -------------------------------------------------------------------

class VoteSongResponse : public ::google::protobuf::Message {
 public:
  VoteSongResponse();
  virtual ~VoteSongResponse();

  VoteSongResponse(const VoteSongResponse& from);

  inline VoteSongResponse& operator=(const VoteSongResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteSongResponse& default_instance();

  void Swap(VoteSongResponse* other);

  // implements Message ----------------------------------------------

  inline VoteSongResponse* New() const { return New(NULL); }

  VoteSongResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoteSongResponse& from);
  void MergeFrom(const VoteSongResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VoteSongResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CrowdSound.VoteSongResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_AssignDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_ShutdownFile_proto_2fcrowdsound_5fservice_2eproto();

  void InitAsDefaultInstance();
  static VoteSongResponse* default_instance_;
};
// -------------------------------------------------------------------

class VoteSkipRequest : public ::google::protobuf::Message {
 public:
  VoteSkipRequest();
  virtual ~VoteSkipRequest();

  VoteSkipRequest(const VoteSkipRequest& from);

  inline VoteSkipRequest& operator=(const VoteSkipRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteSkipRequest& default_instance();

  void Swap(VoteSkipRequest* other);

  // implements Message ----------------------------------------------

  inline VoteSkipRequest* New() const { return New(NULL); }

  VoteSkipRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoteSkipRequest& from);
  void MergeFrom(const VoteSkipRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VoteSkipRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:CrowdSound.VoteSkipRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_AssignDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_ShutdownFile_proto_2fcrowdsound_5fservice_2eproto();

  void InitAsDefaultInstance();
  static VoteSkipRequest* default_instance_;
};
// -------------------------------------------------------------------

class VoteSkipResponse : public ::google::protobuf::Message {
 public:
  VoteSkipResponse();
  virtual ~VoteSkipResponse();

  VoteSkipResponse(const VoteSkipResponse& from);

  inline VoteSkipResponse& operator=(const VoteSkipResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteSkipResponse& default_instance();

  void Swap(VoteSkipResponse* other);

  // implements Message ----------------------------------------------

  inline VoteSkipResponse* New() const { return New(NULL); }

  VoteSkipResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VoteSkipResponse& from);
  void MergeFrom(const VoteSkipResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VoteSkipResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CrowdSound.VoteSkipResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_AssignDesc_proto_2fcrowdsound_5fservice_2eproto();
  friend void protobuf_ShutdownFile_proto_2fcrowdsound_5fservice_2eproto();

  void InitAsDefaultInstance();
  static VoteSkipResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PingRequest

// optional string user_id = 1;
inline void PingRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PingRequest::user_id() const {
  // @@protoc_insertion_point(field_get:CrowdSound.PingRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PingRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.PingRequest.user_id)
}
inline void PingRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.PingRequest.user_id)
}
inline void PingRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.PingRequest.user_id)
}
inline ::std::string* PingRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.PingRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PingRequest::release_user_id() {
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PingRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.PingRequest.user_id)
}

// -------------------------------------------------------------------

// PingResponse

// -------------------------------------------------------------------

// GetSessionDataRequest

// -------------------------------------------------------------------

// GetSessionDataResponse

// optional string session_name = 1;
inline void GetSessionDataResponse::clear_session_name() {
  session_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetSessionDataResponse::session_name() const {
  // @@protoc_insertion_point(field_get:CrowdSound.GetSessionDataResponse.session_name)
  return session_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSessionDataResponse::set_session_name(const ::std::string& value) {
  
  session_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.GetSessionDataResponse.session_name)
}
inline void GetSessionDataResponse::set_session_name(const char* value) {
  
  session_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.GetSessionDataResponse.session_name)
}
inline void GetSessionDataResponse::set_session_name(const char* value, size_t size) {
  
  session_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.GetSessionDataResponse.session_name)
}
inline ::std::string* GetSessionDataResponse::mutable_session_name() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.GetSessionDataResponse.session_name)
  return session_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetSessionDataResponse::release_session_name() {
  
  return session_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSessionDataResponse::set_allocated_session_name(::std::string* session_name) {
  if (session_name != NULL) {
    
  } else {
    
  }
  session_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_name);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.GetSessionDataResponse.session_name)
}

// optional int32 num_users = 2;
inline void GetSessionDataResponse::clear_num_users() {
  num_users_ = 0;
}
inline ::google::protobuf::int32 GetSessionDataResponse::num_users() const {
  // @@protoc_insertion_point(field_get:CrowdSound.GetSessionDataResponse.num_users)
  return num_users_;
}
inline void GetSessionDataResponse::set_num_users(::google::protobuf::int32 value) {
  
  num_users_ = value;
  // @@protoc_insertion_point(field_set:CrowdSound.GetSessionDataResponse.num_users)
}

// -------------------------------------------------------------------

// GetQueueRequest

// optional string user_id = 1;
inline void GetQueueRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetQueueRequest::user_id() const {
  // @@protoc_insertion_point(field_get:CrowdSound.GetQueueRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetQueueRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.GetQueueRequest.user_id)
}
inline void GetQueueRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.GetQueueRequest.user_id)
}
inline void GetQueueRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.GetQueueRequest.user_id)
}
inline ::std::string* GetQueueRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.GetQueueRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetQueueRequest::release_user_id() {
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetQueueRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.GetQueueRequest.user_id)
}

// -------------------------------------------------------------------

// GetQueueResponse

// optional string name = 1;
inline void GetQueueResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetQueueResponse::name() const {
  // @@protoc_insertion_point(field_get:CrowdSound.GetQueueResponse.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetQueueResponse::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.GetQueueResponse.name)
}
inline void GetQueueResponse::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.GetQueueResponse.name)
}
inline void GetQueueResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.GetQueueResponse.name)
}
inline ::std::string* GetQueueResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.GetQueueResponse.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetQueueResponse::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetQueueResponse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.GetQueueResponse.name)
}

// optional string artist = 2;
inline void GetQueueResponse::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetQueueResponse::artist() const {
  // @@protoc_insertion_point(field_get:CrowdSound.GetQueueResponse.artist)
  return artist_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetQueueResponse::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.GetQueueResponse.artist)
}
inline void GetQueueResponse::set_artist(const char* value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.GetQueueResponse.artist)
}
inline void GetQueueResponse::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.GetQueueResponse.artist)
}
inline ::std::string* GetQueueResponse::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.GetQueueResponse.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetQueueResponse::release_artist() {
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetQueueResponse::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.GetQueueResponse.artist)
}

// optional string genre = 3;
inline void GetQueueResponse::clear_genre() {
  genre_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetQueueResponse::genre() const {
  // @@protoc_insertion_point(field_get:CrowdSound.GetQueueResponse.genre)
  return genre_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetQueueResponse::set_genre(const ::std::string& value) {
  
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.GetQueueResponse.genre)
}
inline void GetQueueResponse::set_genre(const char* value) {
  
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.GetQueueResponse.genre)
}
inline void GetQueueResponse::set_genre(const char* value, size_t size) {
  
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.GetQueueResponse.genre)
}
inline ::std::string* GetQueueResponse::mutable_genre() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.GetQueueResponse.genre)
  return genre_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetQueueResponse::release_genre() {
  
  return genre_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetQueueResponse::set_allocated_genre(::std::string* genre) {
  if (genre != NULL) {
    
  } else {
    
  }
  genre_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), genre);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.GetQueueResponse.genre)
}

// optional bool isPlaying = 4;
inline void GetQueueResponse::clear_isplaying() {
  isplaying_ = false;
}
inline bool GetQueueResponse::isplaying() const {
  // @@protoc_insertion_point(field_get:CrowdSound.GetQueueResponse.isPlaying)
  return isplaying_;
}
inline void GetQueueResponse::set_isplaying(bool value) {
  
  isplaying_ = value;
  // @@protoc_insertion_point(field_set:CrowdSound.GetQueueResponse.isPlaying)
}

// optional bool isBuffered = 5;
inline void GetQueueResponse::clear_isbuffered() {
  isbuffered_ = false;
}
inline bool GetQueueResponse::isbuffered() const {
  // @@protoc_insertion_point(field_get:CrowdSound.GetQueueResponse.isBuffered)
  return isbuffered_;
}
inline void GetQueueResponse::set_isbuffered(bool value) {
  
  isbuffered_ = value;
  // @@protoc_insertion_point(field_set:CrowdSound.GetQueueResponse.isBuffered)
}

// -------------------------------------------------------------------

// ListTrendingArtistsRequest

// -------------------------------------------------------------------

// ListTrendingArtistsResponse

// optional string name = 1;
inline void ListTrendingArtistsResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTrendingArtistsResponse::name() const {
  // @@protoc_insertion_point(field_get:CrowdSound.ListTrendingArtistsResponse.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTrendingArtistsResponse::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.ListTrendingArtistsResponse.name)
}
inline void ListTrendingArtistsResponse::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.ListTrendingArtistsResponse.name)
}
inline void ListTrendingArtistsResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.ListTrendingArtistsResponse.name)
}
inline ::std::string* ListTrendingArtistsResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.ListTrendingArtistsResponse.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTrendingArtistsResponse::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTrendingArtistsResponse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.ListTrendingArtistsResponse.name)
}

// optional int32 score = 2;
inline void ListTrendingArtistsResponse::clear_score() {
  score_ = 0;
}
inline ::google::protobuf::int32 ListTrendingArtistsResponse::score() const {
  // @@protoc_insertion_point(field_get:CrowdSound.ListTrendingArtistsResponse.score)
  return score_;
}
inline void ListTrendingArtistsResponse::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:CrowdSound.ListTrendingArtistsResponse.score)
}

// -------------------------------------------------------------------

// PostSongRequest

// optional string user_id = 1;
inline void PostSongRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PostSongRequest::user_id() const {
  // @@protoc_insertion_point(field_get:CrowdSound.PostSongRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostSongRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.PostSongRequest.user_id)
}
inline void PostSongRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.PostSongRequest.user_id)
}
inline void PostSongRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.PostSongRequest.user_id)
}
inline ::std::string* PostSongRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.PostSongRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PostSongRequest::release_user_id() {
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostSongRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.PostSongRequest.user_id)
}

// optional string name = 2;
inline void PostSongRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PostSongRequest::name() const {
  // @@protoc_insertion_point(field_get:CrowdSound.PostSongRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostSongRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.PostSongRequest.name)
}
inline void PostSongRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.PostSongRequest.name)
}
inline void PostSongRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.PostSongRequest.name)
}
inline ::std::string* PostSongRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.PostSongRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PostSongRequest::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostSongRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.PostSongRequest.name)
}

// repeated string artist = 3;
inline int PostSongRequest::artist_size() const {
  return artist_.size();
}
inline void PostSongRequest::clear_artist() {
  artist_.Clear();
}
inline const ::std::string& PostSongRequest::artist(int index) const {
  // @@protoc_insertion_point(field_get:CrowdSound.PostSongRequest.artist)
  return artist_.Get(index);
}
inline ::std::string* PostSongRequest::mutable_artist(int index) {
  // @@protoc_insertion_point(field_mutable:CrowdSound.PostSongRequest.artist)
  return artist_.Mutable(index);
}
inline void PostSongRequest::set_artist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CrowdSound.PostSongRequest.artist)
  artist_.Mutable(index)->assign(value);
}
inline void PostSongRequest::set_artist(int index, const char* value) {
  artist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CrowdSound.PostSongRequest.artist)
}
inline void PostSongRequest::set_artist(int index, const char* value, size_t size) {
  artist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.PostSongRequest.artist)
}
inline ::std::string* PostSongRequest::add_artist() {
  return artist_.Add();
}
inline void PostSongRequest::add_artist(const ::std::string& value) {
  artist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CrowdSound.PostSongRequest.artist)
}
inline void PostSongRequest::add_artist(const char* value) {
  artist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CrowdSound.PostSongRequest.artist)
}
inline void PostSongRequest::add_artist(const char* value, size_t size) {
  artist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CrowdSound.PostSongRequest.artist)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PostSongRequest::artist() const {
  // @@protoc_insertion_point(field_list:CrowdSound.PostSongRequest.artist)
  return artist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PostSongRequest::mutable_artist() {
  // @@protoc_insertion_point(field_mutable_list:CrowdSound.PostSongRequest.artist)
  return &artist_;
}

// optional string genre = 4;
inline void PostSongRequest::clear_genre() {
  genre_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PostSongRequest::genre() const {
  // @@protoc_insertion_point(field_get:CrowdSound.PostSongRequest.genre)
  return genre_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostSongRequest::set_genre(const ::std::string& value) {
  
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.PostSongRequest.genre)
}
inline void PostSongRequest::set_genre(const char* value) {
  
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.PostSongRequest.genre)
}
inline void PostSongRequest::set_genre(const char* value, size_t size) {
  
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.PostSongRequest.genre)
}
inline ::std::string* PostSongRequest::mutable_genre() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.PostSongRequest.genre)
  return genre_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PostSongRequest::release_genre() {
  
  return genre_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostSongRequest::set_allocated_genre(::std::string* genre) {
  if (genre != NULL) {
    
  } else {
    
  }
  genre_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), genre);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.PostSongRequest.genre)
}

// -------------------------------------------------------------------

// PostSongResponse

// -------------------------------------------------------------------

// VoteSongRequest

// optional string user_id = 1;
inline void VoteSongRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VoteSongRequest::user_id() const {
  // @@protoc_insertion_point(field_get:CrowdSound.VoteSongRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoteSongRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.VoteSongRequest.user_id)
}
inline void VoteSongRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.VoteSongRequest.user_id)
}
inline void VoteSongRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.VoteSongRequest.user_id)
}
inline ::std::string* VoteSongRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.VoteSongRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoteSongRequest::release_user_id() {
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoteSongRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.VoteSongRequest.user_id)
}

// optional string name = 2;
inline void VoteSongRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VoteSongRequest::name() const {
  // @@protoc_insertion_point(field_get:CrowdSound.VoteSongRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoteSongRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.VoteSongRequest.name)
}
inline void VoteSongRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.VoteSongRequest.name)
}
inline void VoteSongRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.VoteSongRequest.name)
}
inline ::std::string* VoteSongRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.VoteSongRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoteSongRequest::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoteSongRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.VoteSongRequest.name)
}

// optional string artist = 3;
inline void VoteSongRequest::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VoteSongRequest::artist() const {
  // @@protoc_insertion_point(field_get:CrowdSound.VoteSongRequest.artist)
  return artist_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoteSongRequest::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.VoteSongRequest.artist)
}
inline void VoteSongRequest::set_artist(const char* value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.VoteSongRequest.artist)
}
inline void VoteSongRequest::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.VoteSongRequest.artist)
}
inline ::std::string* VoteSongRequest::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.VoteSongRequest.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoteSongRequest::release_artist() {
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoteSongRequest::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.VoteSongRequest.artist)
}

// optional bool like = 4;
inline void VoteSongRequest::clear_like() {
  like_ = false;
}
inline bool VoteSongRequest::like() const {
  // @@protoc_insertion_point(field_get:CrowdSound.VoteSongRequest.like)
  return like_;
}
inline void VoteSongRequest::set_like(bool value) {
  
  like_ = value;
  // @@protoc_insertion_point(field_set:CrowdSound.VoteSongRequest.like)
}

// -------------------------------------------------------------------

// VoteSongResponse

// -------------------------------------------------------------------

// VoteSkipRequest

// optional string user_id = 1;
inline void VoteSkipRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VoteSkipRequest::user_id() const {
  // @@protoc_insertion_point(field_get:CrowdSound.VoteSkipRequest.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoteSkipRequest::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.VoteSkipRequest.user_id)
}
inline void VoteSkipRequest::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.VoteSkipRequest.user_id)
}
inline void VoteSkipRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.VoteSkipRequest.user_id)
}
inline ::std::string* VoteSkipRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.VoteSkipRequest.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoteSkipRequest::release_user_id() {
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoteSkipRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.VoteSkipRequest.user_id)
}

// -------------------------------------------------------------------

// VoteSkipResponse

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CrowdSound

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fcrowdsound_5fservice_2eproto__INCLUDED
