// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/crowdsound_admin_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/crowdsound_admin_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CrowdSound {

namespace {

const ::google::protobuf::Descriptor* SkipStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkipStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkipStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkipStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkipRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkipRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkipResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkipResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fcrowdsound_5fadmin_5fservice_2eproto() {
  protobuf_AddDesc_proto_2fcrowdsound_5fadmin_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/crowdsound_admin_service.proto");
  GOOGLE_CHECK(file != NULL);
  SkipStatusRequest_descriptor_ = file->message_type(0);
  static const int SkipStatusRequest_offsets_[1] = {
  };
  SkipStatusRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SkipStatusRequest_descriptor_,
      SkipStatusRequest::default_instance_,
      SkipStatusRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SkipStatusRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipStatusRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipStatusRequest, _is_default_instance_));
  SkipStatusResponse_descriptor_ = file->message_type(1);
  static const int SkipStatusResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipStatusResponse, votes_to_skip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipStatusResponse, total_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipStatusResponse, threshold_),
  };
  SkipStatusResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SkipStatusResponse_descriptor_,
      SkipStatusResponse::default_instance_,
      SkipStatusResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SkipStatusResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipStatusResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipStatusResponse, _is_default_instance_));
  SkipRequest_descriptor_ = file->message_type(2);
  static const int SkipRequest_offsets_[1] = {
  };
  SkipRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SkipRequest_descriptor_,
      SkipRequest::default_instance_,
      SkipRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SkipRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipRequest, _is_default_instance_));
  SkipResponse_descriptor_ = file->message_type(3);
  static const int SkipResponse_offsets_[1] = {
  };
  SkipResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SkipResponse_descriptor_,
      SkipResponse::default_instance_,
      SkipResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SkipResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fcrowdsound_5fadmin_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SkipStatusRequest_descriptor_, &SkipStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SkipStatusResponse_descriptor_, &SkipStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SkipRequest_descriptor_, &SkipRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SkipResponse_descriptor_, &SkipResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fcrowdsound_5fadmin_5fservice_2eproto() {
  delete SkipStatusRequest::default_instance_;
  delete SkipStatusRequest_reflection_;
  delete SkipStatusResponse::default_instance_;
  delete SkipStatusResponse_reflection_;
  delete SkipRequest::default_instance_;
  delete SkipRequest_reflection_;
  delete SkipResponse::default_instance_;
  delete SkipResponse_reflection_;
}

void protobuf_AddDesc_proto_2fcrowdsound_5fadmin_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$proto/crowdsound_admin_service.proto\022\n"
    "CrowdSound\"\023\n\021SkipStatusRequest\"S\n\022SkipS"
    "tatusResponse\022\025\n\rvotes_to_skip\030\001 \001(\005\022\023\n\013"
    "total_users\030\002 \001(\005\022\021\n\tthreshold\030\003 \001(\002\"\r\n\013"
    "SkipRequest\"\016\n\014SkipResponse2\223\001\n\005Admin\022M\n"
    "\nSkipStatus\022\035.CrowdSound.SkipStatusReque"
    "st\032\036.CrowdSound.SkipStatusResponse\"\000\022;\n\004"
    "Skip\022\027.CrowdSound.SkipRequest\032\030.CrowdSou"
    "nd.SkipResponse\"\000B\014Z\ncrowdsoundb\006proto3", 359);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/crowdsound_admin_service.proto", &protobuf_RegisterTypes);
  SkipStatusRequest::default_instance_ = new SkipStatusRequest();
  SkipStatusResponse::default_instance_ = new SkipStatusResponse();
  SkipRequest::default_instance_ = new SkipRequest();
  SkipResponse::default_instance_ = new SkipResponse();
  SkipStatusRequest::default_instance_->InitAsDefaultInstance();
  SkipStatusResponse::default_instance_->InitAsDefaultInstance();
  SkipRequest::default_instance_->InitAsDefaultInstance();
  SkipResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fcrowdsound_5fadmin_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fcrowdsound_5fadmin_5fservice_2eproto {
  StaticDescriptorInitializer_proto_2fcrowdsound_5fadmin_5fservice_2eproto() {
    protobuf_AddDesc_proto_2fcrowdsound_5fadmin_5fservice_2eproto();
  }
} static_descriptor_initializer_proto_2fcrowdsound_5fadmin_5fservice_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SkipStatusRequest::SkipStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CrowdSound.SkipStatusRequest)
}

void SkipStatusRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SkipStatusRequest::SkipStatusRequest(const SkipStatusRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CrowdSound.SkipStatusRequest)
}

void SkipStatusRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SkipStatusRequest::~SkipStatusRequest() {
  // @@protoc_insertion_point(destructor:CrowdSound.SkipStatusRequest)
  SharedDtor();
}

void SkipStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkipStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkipStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkipStatusRequest_descriptor_;
}

const SkipStatusRequest& SkipStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fcrowdsound_5fadmin_5fservice_2eproto();
  return *default_instance_;
}

SkipStatusRequest* SkipStatusRequest::default_instance_ = NULL;

SkipStatusRequest* SkipStatusRequest::New(::google::protobuf::Arena* arena) const {
  SkipStatusRequest* n = new SkipStatusRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SkipStatusRequest::Clear() {
}

bool SkipStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CrowdSound.SkipStatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:CrowdSound.SkipStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CrowdSound.SkipStatusRequest)
  return false;
#undef DO_
}

void SkipStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CrowdSound.SkipStatusRequest)
  // @@protoc_insertion_point(serialize_end:CrowdSound.SkipStatusRequest)
}

::google::protobuf::uint8* SkipStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CrowdSound.SkipStatusRequest)
  // @@protoc_insertion_point(serialize_to_array_end:CrowdSound.SkipStatusRequest)
  return target;
}

int SkipStatusRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkipStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SkipStatusRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SkipStatusRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkipStatusRequest::MergeFrom(const SkipStatusRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void SkipStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkipStatusRequest::CopyFrom(const SkipStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkipStatusRequest::IsInitialized() const {

  return true;
}

void SkipStatusRequest::Swap(SkipStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SkipStatusRequest::InternalSwap(SkipStatusRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SkipStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkipStatusRequest_descriptor_;
  metadata.reflection = SkipStatusRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SkipStatusRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SkipStatusResponse::kVotesToSkipFieldNumber;
const int SkipStatusResponse::kTotalUsersFieldNumber;
const int SkipStatusResponse::kThresholdFieldNumber;
#endif  // !_MSC_VER

SkipStatusResponse::SkipStatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CrowdSound.SkipStatusResponse)
}

void SkipStatusResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SkipStatusResponse::SkipStatusResponse(const SkipStatusResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CrowdSound.SkipStatusResponse)
}

void SkipStatusResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  votes_to_skip_ = 0;
  total_users_ = 0;
  threshold_ = 0;
}

SkipStatusResponse::~SkipStatusResponse() {
  // @@protoc_insertion_point(destructor:CrowdSound.SkipStatusResponse)
  SharedDtor();
}

void SkipStatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkipStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkipStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkipStatusResponse_descriptor_;
}

const SkipStatusResponse& SkipStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fcrowdsound_5fadmin_5fservice_2eproto();
  return *default_instance_;
}

SkipStatusResponse* SkipStatusResponse::default_instance_ = NULL;

SkipStatusResponse* SkipStatusResponse::New(::google::protobuf::Arena* arena) const {
  SkipStatusResponse* n = new SkipStatusResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SkipStatusResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SkipStatusResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(votes_to_skip_, threshold_);

#undef ZR_HELPER_
#undef ZR_

}

bool SkipStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CrowdSound.SkipStatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 votes_to_skip = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &votes_to_skip_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_users;
        break;
      }

      // optional int32 total_users = 2;
      case 2: {
        if (tag == 16) {
         parse_total_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_users_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_threshold;
        break;
      }

      // optional float threshold = 3;
      case 3: {
        if (tag == 29) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CrowdSound.SkipStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CrowdSound.SkipStatusResponse)
  return false;
#undef DO_
}

void SkipStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CrowdSound.SkipStatusResponse)
  // optional int32 votes_to_skip = 1;
  if (this->votes_to_skip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->votes_to_skip(), output);
  }

  // optional int32 total_users = 2;
  if (this->total_users() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_users(), output);
  }

  // optional float threshold = 3;
  if (this->threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->threshold(), output);
  }

  // @@protoc_insertion_point(serialize_end:CrowdSound.SkipStatusResponse)
}

::google::protobuf::uint8* SkipStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CrowdSound.SkipStatusResponse)
  // optional int32 votes_to_skip = 1;
  if (this->votes_to_skip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->votes_to_skip(), target);
  }

  // optional int32 total_users = 2;
  if (this->total_users() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_users(), target);
  }

  // optional float threshold = 3;
  if (this->threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->threshold(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CrowdSound.SkipStatusResponse)
  return target;
}

int SkipStatusResponse::ByteSize() const {
  int total_size = 0;

  // optional int32 votes_to_skip = 1;
  if (this->votes_to_skip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->votes_to_skip());
  }

  // optional int32 total_users = 2;
  if (this->total_users() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_users());
  }

  // optional float threshold = 3;
  if (this->threshold() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkipStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SkipStatusResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SkipStatusResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkipStatusResponse::MergeFrom(const SkipStatusResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.votes_to_skip() != 0) {
    set_votes_to_skip(from.votes_to_skip());
  }
  if (from.total_users() != 0) {
    set_total_users(from.total_users());
  }
  if (from.threshold() != 0) {
    set_threshold(from.threshold());
  }
}

void SkipStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkipStatusResponse::CopyFrom(const SkipStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkipStatusResponse::IsInitialized() const {

  return true;
}

void SkipStatusResponse::Swap(SkipStatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SkipStatusResponse::InternalSwap(SkipStatusResponse* other) {
  std::swap(votes_to_skip_, other->votes_to_skip_);
  std::swap(total_users_, other->total_users_);
  std::swap(threshold_, other->threshold_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SkipStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkipStatusResponse_descriptor_;
  metadata.reflection = SkipStatusResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SkipStatusResponse

// optional int32 votes_to_skip = 1;
void SkipStatusResponse::clear_votes_to_skip() {
  votes_to_skip_ = 0;
}
 ::google::protobuf::int32 SkipStatusResponse::votes_to_skip() const {
  // @@protoc_insertion_point(field_get:CrowdSound.SkipStatusResponse.votes_to_skip)
  return votes_to_skip_;
}
 void SkipStatusResponse::set_votes_to_skip(::google::protobuf::int32 value) {
  
  votes_to_skip_ = value;
  // @@protoc_insertion_point(field_set:CrowdSound.SkipStatusResponse.votes_to_skip)
}

// optional int32 total_users = 2;
void SkipStatusResponse::clear_total_users() {
  total_users_ = 0;
}
 ::google::protobuf::int32 SkipStatusResponse::total_users() const {
  // @@protoc_insertion_point(field_get:CrowdSound.SkipStatusResponse.total_users)
  return total_users_;
}
 void SkipStatusResponse::set_total_users(::google::protobuf::int32 value) {
  
  total_users_ = value;
  // @@protoc_insertion_point(field_set:CrowdSound.SkipStatusResponse.total_users)
}

// optional float threshold = 3;
void SkipStatusResponse::clear_threshold() {
  threshold_ = 0;
}
 float SkipStatusResponse::threshold() const {
  // @@protoc_insertion_point(field_get:CrowdSound.SkipStatusResponse.threshold)
  return threshold_;
}
 void SkipStatusResponse::set_threshold(float value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:CrowdSound.SkipStatusResponse.threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SkipRequest::SkipRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CrowdSound.SkipRequest)
}

void SkipRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SkipRequest::SkipRequest(const SkipRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CrowdSound.SkipRequest)
}

void SkipRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SkipRequest::~SkipRequest() {
  // @@protoc_insertion_point(destructor:CrowdSound.SkipRequest)
  SharedDtor();
}

void SkipRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkipRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkipRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkipRequest_descriptor_;
}

const SkipRequest& SkipRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fcrowdsound_5fadmin_5fservice_2eproto();
  return *default_instance_;
}

SkipRequest* SkipRequest::default_instance_ = NULL;

SkipRequest* SkipRequest::New(::google::protobuf::Arena* arena) const {
  SkipRequest* n = new SkipRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SkipRequest::Clear() {
}

bool SkipRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CrowdSound.SkipRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:CrowdSound.SkipRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CrowdSound.SkipRequest)
  return false;
#undef DO_
}

void SkipRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CrowdSound.SkipRequest)
  // @@protoc_insertion_point(serialize_end:CrowdSound.SkipRequest)
}

::google::protobuf::uint8* SkipRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CrowdSound.SkipRequest)
  // @@protoc_insertion_point(serialize_to_array_end:CrowdSound.SkipRequest)
  return target;
}

int SkipRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkipRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SkipRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SkipRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkipRequest::MergeFrom(const SkipRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void SkipRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkipRequest::CopyFrom(const SkipRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkipRequest::IsInitialized() const {

  return true;
}

void SkipRequest::Swap(SkipRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SkipRequest::InternalSwap(SkipRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SkipRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkipRequest_descriptor_;
  metadata.reflection = SkipRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SkipRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SkipResponse::SkipResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CrowdSound.SkipResponse)
}

void SkipResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SkipResponse::SkipResponse(const SkipResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CrowdSound.SkipResponse)
}

void SkipResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SkipResponse::~SkipResponse() {
  // @@protoc_insertion_point(destructor:CrowdSound.SkipResponse)
  SharedDtor();
}

void SkipResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkipResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkipResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkipResponse_descriptor_;
}

const SkipResponse& SkipResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fcrowdsound_5fadmin_5fservice_2eproto();
  return *default_instance_;
}

SkipResponse* SkipResponse::default_instance_ = NULL;

SkipResponse* SkipResponse::New(::google::protobuf::Arena* arena) const {
  SkipResponse* n = new SkipResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SkipResponse::Clear() {
}

bool SkipResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CrowdSound.SkipResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:CrowdSound.SkipResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CrowdSound.SkipResponse)
  return false;
#undef DO_
}

void SkipResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CrowdSound.SkipResponse)
  // @@protoc_insertion_point(serialize_end:CrowdSound.SkipResponse)
}

::google::protobuf::uint8* SkipResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CrowdSound.SkipResponse)
  // @@protoc_insertion_point(serialize_to_array_end:CrowdSound.SkipResponse)
  return target;
}

int SkipResponse::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkipResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SkipResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SkipResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkipResponse::MergeFrom(const SkipResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void SkipResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkipResponse::CopyFrom(const SkipResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkipResponse::IsInitialized() const {

  return true;
}

void SkipResponse::Swap(SkipResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SkipResponse::InternalSwap(SkipResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SkipResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkipResponse_descriptor_;
  metadata.reflection = SkipResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SkipResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace CrowdSound

// @@protoc_insertion_point(global_scope)
