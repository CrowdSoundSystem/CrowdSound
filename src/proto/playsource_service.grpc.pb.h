// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: proto/playsource_service.proto
#ifndef GRPC_proto_2fplaysource_5fservice_2eproto__INCLUDED
#define GRPC_proto_2fplaysource_5fservice_2eproto__INCLUDED

#include "proto/playsource_service.pb.h"

#include <grpc++/support/async_stream.h>
#include <grpc++/impl/rpc_method.h>
#include <grpc++/impl/proto_utils.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/status.h>
#include <grpc++/support/stub_options.h>
#include <grpc++/support/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace Playsource {

class Playsource GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::Playsource::QueueSongRequest, ::Playsource::QueueSongResponse>> QueueSong(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::Playsource::QueueSongRequest, ::Playsource::QueueSongResponse>>(QueueSongRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Playsource::QueueSongRequest, ::Playsource::QueueSongResponse>> AsyncQueueSong(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::Playsource::QueueSongRequest, ::Playsource::QueueSongResponse>>(AsyncQueueSongRaw(context, cq, tag));
    }
    virtual ::grpc::Status GetPlaying(::grpc::ClientContext* context, const ::Playsource::GetPlayingRequest& request, ::Playsource::GetPlayingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Playsource::GetPlayingResponse>> AsyncGetPlaying(::grpc::ClientContext* context, const ::Playsource::GetPlayingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Playsource::GetPlayingResponse>>(AsyncGetPlayingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::Playsource::GetPlayHistoryResponse>> GetPlayHistory(::grpc::ClientContext* context, const ::Playsource::GetPlayHistoryRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::Playsource::GetPlayHistoryResponse>>(GetPlayHistoryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Playsource::GetPlayHistoryResponse>> AsyncGetPlayHistory(::grpc::ClientContext* context, const ::Playsource::GetPlayHistoryRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Playsource::GetPlayHistoryResponse>>(AsyncGetPlayHistoryRaw(context, request, cq, tag));
    }
  private:
    virtual ::grpc::ClientReaderWriterInterface< ::Playsource::QueueSongRequest, ::Playsource::QueueSongResponse>* QueueSongRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::Playsource::QueueSongRequest, ::Playsource::QueueSongResponse>* AsyncQueueSongRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Playsource::GetPlayingResponse>* AsyncGetPlayingRaw(::grpc::ClientContext* context, const ::Playsource::GetPlayingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::Playsource::GetPlayHistoryResponse>* GetPlayHistoryRaw(::grpc::ClientContext* context, const ::Playsource::GetPlayHistoryRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Playsource::GetPlayHistoryResponse>* AsyncGetPlayHistoryRaw(::grpc::ClientContext* context, const ::Playsource::GetPlayHistoryRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::Channel>& channel);
    std::unique_ptr< ::grpc::ClientReaderWriter< ::Playsource::QueueSongRequest, ::Playsource::QueueSongResponse>> QueueSong(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::Playsource::QueueSongRequest, ::Playsource::QueueSongResponse>>(QueueSongRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::Playsource::QueueSongRequest, ::Playsource::QueueSongResponse>> AsyncQueueSong(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::Playsource::QueueSongRequest, ::Playsource::QueueSongResponse>>(AsyncQueueSongRaw(context, cq, tag));
    }
    ::grpc::Status GetPlaying(::grpc::ClientContext* context, const ::Playsource::GetPlayingRequest& request, ::Playsource::GetPlayingResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Playsource::GetPlayingResponse>> AsyncGetPlaying(::grpc::ClientContext* context, const ::Playsource::GetPlayingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Playsource::GetPlayingResponse>>(AsyncGetPlayingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::Playsource::GetPlayHistoryResponse>> GetPlayHistory(::grpc::ClientContext* context, const ::Playsource::GetPlayHistoryRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::Playsource::GetPlayHistoryResponse>>(GetPlayHistoryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Playsource::GetPlayHistoryResponse>> AsyncGetPlayHistory(::grpc::ClientContext* context, const ::Playsource::GetPlayHistoryRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Playsource::GetPlayHistoryResponse>>(AsyncGetPlayHistoryRaw(context, request, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::Channel> channel_;
    ::grpc::ClientReaderWriter< ::Playsource::QueueSongRequest, ::Playsource::QueueSongResponse>* QueueSongRaw(::grpc::ClientContext* context) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReaderWriter< ::Playsource::QueueSongRequest, ::Playsource::QueueSongResponse>* AsyncQueueSongRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::Playsource::GetPlayingResponse>* AsyncGetPlayingRaw(::grpc::ClientContext* context, const ::Playsource::GetPlayingRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::Playsource::GetPlayHistoryResponse>* GetPlayHistoryRaw(::grpc::ClientContext* context, const ::Playsource::GetPlayHistoryRequest& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::Playsource::GetPlayHistoryResponse>* AsyncGetPlayHistoryRaw(::grpc::ClientContext* context, const ::Playsource::GetPlayHistoryRequest& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_QueueSong_;
    const ::grpc::RpcMethod rpcmethod_GetPlaying_;
    const ::grpc::RpcMethod rpcmethod_GetPlayHistory_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::SynchronousService {
   public:
    Service() : service_(nullptr) {}
    virtual ~Service();
    virtual ::grpc::Status QueueSong(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Playsource::QueueSongResponse, ::Playsource::QueueSongRequest>* stream);
    virtual ::grpc::Status GetPlaying(::grpc::ServerContext* context, const ::Playsource::GetPlayingRequest* request, ::Playsource::GetPlayingResponse* response);
    virtual ::grpc::Status GetPlayHistory(::grpc::ServerContext* context, const ::Playsource::GetPlayHistoryRequest* request, ::grpc::ServerWriter< ::Playsource::GetPlayHistoryResponse>* writer);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    ::grpc::RpcService* service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService();
    ~AsyncService() {};
    void RequestQueueSong(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::Playsource::QueueSongResponse, ::Playsource::QueueSongRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestGetPlaying(::grpc::ServerContext* context, ::Playsource::GetPlayingRequest* request, ::grpc::ServerAsyncResponseWriter< ::Playsource::GetPlayingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestGetPlayHistory(::grpc::ServerContext* context, ::Playsource::GetPlayHistoryRequest* request, ::grpc::ServerAsyncWriter< ::Playsource::GetPlayHistoryResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
  };
};

}  // namespace Playsource


#endif  // GRPC_proto_2fplaysource_5fservice_2eproto__INCLUDED
