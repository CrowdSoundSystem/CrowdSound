// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/crowdsound_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/crowdsound_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CrowdSound {

namespace {

const ::google::protobuf::Descriptor* GetQueueRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQueueRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQueueResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQueueResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListTrendingArtistsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListTrendingArtistsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListTrendingArtistsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListTrendingArtistsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostSongRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostSongRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostSongResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostSongResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoteSongRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoteSongRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VoteSongResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VoteSongResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fcrowdsound_5fservice_2eproto() {
  protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/crowdsound_service.proto");
  GOOGLE_CHECK(file != NULL);
  GetQueueRequest_descriptor_ = file->message_type(0);
  static const int GetQueueRequest_offsets_[1] = {
  };
  GetQueueRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetQueueRequest_descriptor_,
      GetQueueRequest::default_instance_,
      GetQueueRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetQueueRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueueRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueueRequest, _is_default_instance_));
  GetQueueResponse_descriptor_ = file->message_type(1);
  static const int GetQueueResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueueResponse, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueueResponse, artist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueueResponse, genre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueueResponse, isplaying_),
  };
  GetQueueResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetQueueResponse_descriptor_,
      GetQueueResponse::default_instance_,
      GetQueueResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetQueueResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueueResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueueResponse, _is_default_instance_));
  ListTrendingArtistsRequest_descriptor_ = file->message_type(2);
  static const int ListTrendingArtistsRequest_offsets_[1] = {
  };
  ListTrendingArtistsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListTrendingArtistsRequest_descriptor_,
      ListTrendingArtistsRequest::default_instance_,
      ListTrendingArtistsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListTrendingArtistsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTrendingArtistsRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTrendingArtistsRequest, _is_default_instance_));
  ListTrendingArtistsResponse_descriptor_ = file->message_type(3);
  static const int ListTrendingArtistsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTrendingArtistsResponse, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTrendingArtistsResponse, score_),
  };
  ListTrendingArtistsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ListTrendingArtistsResponse_descriptor_,
      ListTrendingArtistsResponse::default_instance_,
      ListTrendingArtistsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ListTrendingArtistsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTrendingArtistsResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListTrendingArtistsResponse, _is_default_instance_));
  PostSongRequest_descriptor_ = file->message_type(4);
  static const int PostSongRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostSongRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostSongRequest, artist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostSongRequest, genre_),
  };
  PostSongRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PostSongRequest_descriptor_,
      PostSongRequest::default_instance_,
      PostSongRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PostSongRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostSongRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostSongRequest, _is_default_instance_));
  PostSongResponse_descriptor_ = file->message_type(5);
  static const int PostSongResponse_offsets_[1] = {
  };
  PostSongResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PostSongResponse_descriptor_,
      PostSongResponse::default_instance_,
      PostSongResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PostSongResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostSongResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostSongResponse, _is_default_instance_));
  VoteSongRequest_descriptor_ = file->message_type(6);
  static const int VoteSongRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteSongRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteSongRequest, artist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteSongRequest, like_),
  };
  VoteSongRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VoteSongRequest_descriptor_,
      VoteSongRequest::default_instance_,
      VoteSongRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(VoteSongRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteSongRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteSongRequest, _is_default_instance_));
  VoteSongResponse_descriptor_ = file->message_type(7);
  static const int VoteSongResponse_offsets_[1] = {
  };
  VoteSongResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VoteSongResponse_descriptor_,
      VoteSongResponse::default_instance_,
      VoteSongResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(VoteSongResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteSongResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VoteSongResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fcrowdsound_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetQueueRequest_descriptor_, &GetQueueRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetQueueResponse_descriptor_, &GetQueueResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListTrendingArtistsRequest_descriptor_, &ListTrendingArtistsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ListTrendingArtistsResponse_descriptor_, &ListTrendingArtistsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PostSongRequest_descriptor_, &PostSongRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PostSongResponse_descriptor_, &PostSongResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VoteSongRequest_descriptor_, &VoteSongRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VoteSongResponse_descriptor_, &VoteSongResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fcrowdsound_5fservice_2eproto() {
  delete GetQueueRequest::default_instance_;
  delete GetQueueRequest_reflection_;
  delete GetQueueResponse::default_instance_;
  delete GetQueueResponse_reflection_;
  delete ListTrendingArtistsRequest::default_instance_;
  delete ListTrendingArtistsRequest_reflection_;
  delete ListTrendingArtistsResponse::default_instance_;
  delete ListTrendingArtistsResponse_reflection_;
  delete PostSongRequest::default_instance_;
  delete PostSongRequest_reflection_;
  delete PostSongResponse::default_instance_;
  delete PostSongResponse_reflection_;
  delete VoteSongRequest::default_instance_;
  delete VoteSongRequest_reflection_;
  delete VoteSongResponse::default_instance_;
  delete VoteSongResponse_reflection_;
}

void protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036proto/crowdsound_service.proto\022\nCrowdS"
    "ound\"\021\n\017GetQueueRequest\"R\n\020GetQueueRespo"
    "nse\022\014\n\004name\030\001 \001(\t\022\016\n\006artist\030\002 \001(\t\022\r\n\005gen"
    "re\030\003 \001(\t\022\021\n\tisPlaying\030\004 \001(\010\"\034\n\032ListTrend"
    "ingArtistsRequest\":\n\033ListTrendingArtists"
    "Response\022\014\n\004name\030\001 \001(\t\022\r\n\005score\030\002 \001(\005\">\n"
    "\017PostSongRequest\022\014\n\004name\030\001 \001(\t\022\016\n\006artist"
    "\030\002 \001(\t\022\r\n\005genre\030\003 \001(\t\"\022\n\020PostSongRespons"
    "e\"=\n\017VoteSongRequest\022\014\n\004name\030\001 \001(\t\022\016\n\006ar"
    "tist\030\002 \001(\t\022\014\n\004like\030\003 \001(\010\"\022\n\020VoteSongResp"
    "onse2\327\002\n\nCrowdSound\022I\n\010GetQueue\022\033.CrowdS"
    "ound.GetQueueRequest\032\034.CrowdSound.GetQue"
    "ueResponse\"\0000\001\022j\n\023ListTrendingArtists\022&."
    "CrowdSound.ListTrendingArtistsRequest\032\'."
    "CrowdSound.ListTrendingArtistsResponse\"\000"
    "0\001\022I\n\010PostSong\022\033.CrowdSound.PostSongRequ"
    "est\032\034.CrowdSound.PostSongResponse\"\000(\001\022G\n"
    "\010VoteSong\022\033.CrowdSound.VoteSongRequest\032\034"
    ".CrowdSound.VoteSongResponse\"\000B\016\n\007ex.grp"
    "c\242\002\002CSb\006proto3", 774);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/crowdsound_service.proto", &protobuf_RegisterTypes);
  GetQueueRequest::default_instance_ = new GetQueueRequest();
  GetQueueResponse::default_instance_ = new GetQueueResponse();
  ListTrendingArtistsRequest::default_instance_ = new ListTrendingArtistsRequest();
  ListTrendingArtistsResponse::default_instance_ = new ListTrendingArtistsResponse();
  PostSongRequest::default_instance_ = new PostSongRequest();
  PostSongResponse::default_instance_ = new PostSongResponse();
  VoteSongRequest::default_instance_ = new VoteSongRequest();
  VoteSongResponse::default_instance_ = new VoteSongResponse();
  GetQueueRequest::default_instance_->InitAsDefaultInstance();
  GetQueueResponse::default_instance_->InitAsDefaultInstance();
  ListTrendingArtistsRequest::default_instance_->InitAsDefaultInstance();
  ListTrendingArtistsResponse::default_instance_->InitAsDefaultInstance();
  PostSongRequest::default_instance_->InitAsDefaultInstance();
  PostSongResponse::default_instance_->InitAsDefaultInstance();
  VoteSongRequest::default_instance_->InitAsDefaultInstance();
  VoteSongResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fcrowdsound_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fcrowdsound_5fservice_2eproto {
  StaticDescriptorInitializer_proto_2fcrowdsound_5fservice_2eproto() {
    protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  }
} static_descriptor_initializer_proto_2fcrowdsound_5fservice_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetQueueRequest::GetQueueRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CrowdSound.GetQueueRequest)
}

void GetQueueRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetQueueRequest::GetQueueRequest(const GetQueueRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CrowdSound.GetQueueRequest)
}

void GetQueueRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetQueueRequest::~GetQueueRequest() {
  // @@protoc_insertion_point(destructor:CrowdSound.GetQueueRequest)
  SharedDtor();
}

void GetQueueRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetQueueRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQueueRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQueueRequest_descriptor_;
}

const GetQueueRequest& GetQueueRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  return *default_instance_;
}

GetQueueRequest* GetQueueRequest::default_instance_ = NULL;

GetQueueRequest* GetQueueRequest::New(::google::protobuf::Arena* arena) const {
  GetQueueRequest* n = new GetQueueRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetQueueRequest::Clear() {
}

bool GetQueueRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CrowdSound.GetQueueRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:CrowdSound.GetQueueRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CrowdSound.GetQueueRequest)
  return false;
#undef DO_
}

void GetQueueRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CrowdSound.GetQueueRequest)
  // @@protoc_insertion_point(serialize_end:CrowdSound.GetQueueRequest)
}

::google::protobuf::uint8* GetQueueRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CrowdSound.GetQueueRequest)
  // @@protoc_insertion_point(serialize_to_array_end:CrowdSound.GetQueueRequest)
  return target;
}

int GetQueueRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQueueRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetQueueRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetQueueRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQueueRequest::MergeFrom(const GetQueueRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void GetQueueRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQueueRequest::CopyFrom(const GetQueueRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQueueRequest::IsInitialized() const {

  return true;
}

void GetQueueRequest::Swap(GetQueueRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetQueueRequest::InternalSwap(GetQueueRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetQueueRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQueueRequest_descriptor_;
  metadata.reflection = GetQueueRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetQueueRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetQueueResponse::kNameFieldNumber;
const int GetQueueResponse::kArtistFieldNumber;
const int GetQueueResponse::kGenreFieldNumber;
const int GetQueueResponse::kIsPlayingFieldNumber;
#endif  // !_MSC_VER

GetQueueResponse::GetQueueResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CrowdSound.GetQueueResponse)
}

void GetQueueResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetQueueResponse::GetQueueResponse(const GetQueueResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CrowdSound.GetQueueResponse)
}

void GetQueueResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  genre_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isplaying_ = false;
}

GetQueueResponse::~GetQueueResponse() {
  // @@protoc_insertion_point(destructor:CrowdSound.GetQueueResponse)
  SharedDtor();
}

void GetQueueResponse::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  genre_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetQueueResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQueueResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQueueResponse_descriptor_;
}

const GetQueueResponse& GetQueueResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  return *default_instance_;
}

GetQueueResponse* GetQueueResponse::default_instance_ = NULL;

GetQueueResponse* GetQueueResponse::New(::google::protobuf::Arena* arena) const {
  GetQueueResponse* n = new GetQueueResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetQueueResponse::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  genre_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isplaying_ = false;
}

bool GetQueueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CrowdSound.GetQueueResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CrowdSound.GetQueueResponse.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_artist;
        break;
      }

      // optional string artist = 2;
      case 2: {
        if (tag == 18) {
         parse_artist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->artist().data(), this->artist().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CrowdSound.GetQueueResponse.artist"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_genre;
        break;
      }

      // optional string genre = 3;
      case 3: {
        if (tag == 26) {
         parse_genre:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_genre()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->genre().data(), this->genre().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CrowdSound.GetQueueResponse.genre"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isPlaying;
        break;
      }

      // optional bool isPlaying = 4;
      case 4: {
        if (tag == 32) {
         parse_isPlaying:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isplaying_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CrowdSound.GetQueueResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CrowdSound.GetQueueResponse)
  return false;
#undef DO_
}

void GetQueueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CrowdSound.GetQueueResponse)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CrowdSound.GetQueueResponse.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string artist = 2;
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CrowdSound.GetQueueResponse.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->artist(), output);
  }

  // optional string genre = 3;
  if (this->genre().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->genre().data(), this->genre().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CrowdSound.GetQueueResponse.genre");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->genre(), output);
  }

  // optional bool isPlaying = 4;
  if (this->isplaying() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isplaying(), output);
  }

  // @@protoc_insertion_point(serialize_end:CrowdSound.GetQueueResponse)
}

::google::protobuf::uint8* GetQueueResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CrowdSound.GetQueueResponse)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CrowdSound.GetQueueResponse.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string artist = 2;
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CrowdSound.GetQueueResponse.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->artist(), target);
  }

  // optional string genre = 3;
  if (this->genre().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->genre().data(), this->genre().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CrowdSound.GetQueueResponse.genre");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->genre(), target);
  }

  // optional bool isPlaying = 4;
  if (this->isplaying() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isplaying(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CrowdSound.GetQueueResponse)
  return target;
}

int GetQueueResponse::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string artist = 2;
  if (this->artist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->artist());
  }

  // optional string genre = 3;
  if (this->genre().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->genre());
  }

  // optional bool isPlaying = 4;
  if (this->isplaying() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQueueResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetQueueResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetQueueResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQueueResponse::MergeFrom(const GetQueueResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.artist().size() > 0) {

    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  if (from.genre().size() > 0) {

    genre_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.genre_);
  }
  if (from.isplaying() != 0) {
    set_isplaying(from.isplaying());
  }
}

void GetQueueResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQueueResponse::CopyFrom(const GetQueueResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQueueResponse::IsInitialized() const {

  return true;
}

void GetQueueResponse::Swap(GetQueueResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetQueueResponse::InternalSwap(GetQueueResponse* other) {
  name_.Swap(&other->name_);
  artist_.Swap(&other->artist_);
  genre_.Swap(&other->genre_);
  std::swap(isplaying_, other->isplaying_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetQueueResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQueueResponse_descriptor_;
  metadata.reflection = GetQueueResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetQueueResponse

// optional string name = 1;
void GetQueueResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetQueueResponse::name() const {
  // @@protoc_insertion_point(field_get:CrowdSound.GetQueueResponse.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetQueueResponse::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.GetQueueResponse.name)
}
 void GetQueueResponse::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.GetQueueResponse.name)
}
 void GetQueueResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.GetQueueResponse.name)
}
 ::std::string* GetQueueResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.GetQueueResponse.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetQueueResponse::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetQueueResponse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.GetQueueResponse.name)
}

// optional string artist = 2;
void GetQueueResponse::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetQueueResponse::artist() const {
  // @@protoc_insertion_point(field_get:CrowdSound.GetQueueResponse.artist)
  return artist_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetQueueResponse::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.GetQueueResponse.artist)
}
 void GetQueueResponse::set_artist(const char* value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.GetQueueResponse.artist)
}
 void GetQueueResponse::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.GetQueueResponse.artist)
}
 ::std::string* GetQueueResponse::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.GetQueueResponse.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetQueueResponse::release_artist() {
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetQueueResponse::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.GetQueueResponse.artist)
}

// optional string genre = 3;
void GetQueueResponse::clear_genre() {
  genre_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetQueueResponse::genre() const {
  // @@protoc_insertion_point(field_get:CrowdSound.GetQueueResponse.genre)
  return genre_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetQueueResponse::set_genre(const ::std::string& value) {
  
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.GetQueueResponse.genre)
}
 void GetQueueResponse::set_genre(const char* value) {
  
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.GetQueueResponse.genre)
}
 void GetQueueResponse::set_genre(const char* value, size_t size) {
  
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.GetQueueResponse.genre)
}
 ::std::string* GetQueueResponse::mutable_genre() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.GetQueueResponse.genre)
  return genre_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetQueueResponse::release_genre() {
  
  return genre_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetQueueResponse::set_allocated_genre(::std::string* genre) {
  if (genre != NULL) {
    
  } else {
    
  }
  genre_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), genre);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.GetQueueResponse.genre)
}

// optional bool isPlaying = 4;
void GetQueueResponse::clear_isplaying() {
  isplaying_ = false;
}
 bool GetQueueResponse::isplaying() const {
  // @@protoc_insertion_point(field_get:CrowdSound.GetQueueResponse.isPlaying)
  return isplaying_;
}
 void GetQueueResponse::set_isplaying(bool value) {
  
  isplaying_ = value;
  // @@protoc_insertion_point(field_set:CrowdSound.GetQueueResponse.isPlaying)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ListTrendingArtistsRequest::ListTrendingArtistsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CrowdSound.ListTrendingArtistsRequest)
}

void ListTrendingArtistsRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ListTrendingArtistsRequest::ListTrendingArtistsRequest(const ListTrendingArtistsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CrowdSound.ListTrendingArtistsRequest)
}

void ListTrendingArtistsRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ListTrendingArtistsRequest::~ListTrendingArtistsRequest() {
  // @@protoc_insertion_point(destructor:CrowdSound.ListTrendingArtistsRequest)
  SharedDtor();
}

void ListTrendingArtistsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListTrendingArtistsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTrendingArtistsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListTrendingArtistsRequest_descriptor_;
}

const ListTrendingArtistsRequest& ListTrendingArtistsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  return *default_instance_;
}

ListTrendingArtistsRequest* ListTrendingArtistsRequest::default_instance_ = NULL;

ListTrendingArtistsRequest* ListTrendingArtistsRequest::New(::google::protobuf::Arena* arena) const {
  ListTrendingArtistsRequest* n = new ListTrendingArtistsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListTrendingArtistsRequest::Clear() {
}

bool ListTrendingArtistsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CrowdSound.ListTrendingArtistsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:CrowdSound.ListTrendingArtistsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CrowdSound.ListTrendingArtistsRequest)
  return false;
#undef DO_
}

void ListTrendingArtistsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CrowdSound.ListTrendingArtistsRequest)
  // @@protoc_insertion_point(serialize_end:CrowdSound.ListTrendingArtistsRequest)
}

::google::protobuf::uint8* ListTrendingArtistsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CrowdSound.ListTrendingArtistsRequest)
  // @@protoc_insertion_point(serialize_to_array_end:CrowdSound.ListTrendingArtistsRequest)
  return target;
}

int ListTrendingArtistsRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTrendingArtistsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListTrendingArtistsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListTrendingArtistsRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListTrendingArtistsRequest::MergeFrom(const ListTrendingArtistsRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void ListTrendingArtistsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTrendingArtistsRequest::CopyFrom(const ListTrendingArtistsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTrendingArtistsRequest::IsInitialized() const {

  return true;
}

void ListTrendingArtistsRequest::Swap(ListTrendingArtistsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListTrendingArtistsRequest::InternalSwap(ListTrendingArtistsRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListTrendingArtistsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListTrendingArtistsRequest_descriptor_;
  metadata.reflection = ListTrendingArtistsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListTrendingArtistsRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ListTrendingArtistsResponse::kNameFieldNumber;
const int ListTrendingArtistsResponse::kScoreFieldNumber;
#endif  // !_MSC_VER

ListTrendingArtistsResponse::ListTrendingArtistsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CrowdSound.ListTrendingArtistsResponse)
}

void ListTrendingArtistsResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ListTrendingArtistsResponse::ListTrendingArtistsResponse(const ListTrendingArtistsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CrowdSound.ListTrendingArtistsResponse)
}

void ListTrendingArtistsResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
}

ListTrendingArtistsResponse::~ListTrendingArtistsResponse() {
  // @@protoc_insertion_point(destructor:CrowdSound.ListTrendingArtistsResponse)
  SharedDtor();
}

void ListTrendingArtistsResponse::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ListTrendingArtistsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTrendingArtistsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListTrendingArtistsResponse_descriptor_;
}

const ListTrendingArtistsResponse& ListTrendingArtistsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  return *default_instance_;
}

ListTrendingArtistsResponse* ListTrendingArtistsResponse::default_instance_ = NULL;

ListTrendingArtistsResponse* ListTrendingArtistsResponse::New(::google::protobuf::Arena* arena) const {
  ListTrendingArtistsResponse* n = new ListTrendingArtistsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListTrendingArtistsResponse::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
}

bool ListTrendingArtistsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CrowdSound.ListTrendingArtistsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CrowdSound.ListTrendingArtistsResponse.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CrowdSound.ListTrendingArtistsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CrowdSound.ListTrendingArtistsResponse)
  return false;
#undef DO_
}

void ListTrendingArtistsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CrowdSound.ListTrendingArtistsResponse)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CrowdSound.ListTrendingArtistsResponse.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 score = 2;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // @@protoc_insertion_point(serialize_end:CrowdSound.ListTrendingArtistsResponse)
}

::google::protobuf::uint8* ListTrendingArtistsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CrowdSound.ListTrendingArtistsResponse)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CrowdSound.ListTrendingArtistsResponse.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 score = 2;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CrowdSound.ListTrendingArtistsResponse)
  return target;
}

int ListTrendingArtistsResponse::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTrendingArtistsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ListTrendingArtistsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ListTrendingArtistsResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListTrendingArtistsResponse::MergeFrom(const ListTrendingArtistsResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void ListTrendingArtistsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTrendingArtistsResponse::CopyFrom(const ListTrendingArtistsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTrendingArtistsResponse::IsInitialized() const {

  return true;
}

void ListTrendingArtistsResponse::Swap(ListTrendingArtistsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListTrendingArtistsResponse::InternalSwap(ListTrendingArtistsResponse* other) {
  name_.Swap(&other->name_);
  std::swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListTrendingArtistsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListTrendingArtistsResponse_descriptor_;
  metadata.reflection = ListTrendingArtistsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListTrendingArtistsResponse

// optional string name = 1;
void ListTrendingArtistsResponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ListTrendingArtistsResponse::name() const {
  // @@protoc_insertion_point(field_get:CrowdSound.ListTrendingArtistsResponse.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListTrendingArtistsResponse::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.ListTrendingArtistsResponse.name)
}
 void ListTrendingArtistsResponse::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.ListTrendingArtistsResponse.name)
}
 void ListTrendingArtistsResponse::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.ListTrendingArtistsResponse.name)
}
 ::std::string* ListTrendingArtistsResponse::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.ListTrendingArtistsResponse.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ListTrendingArtistsResponse::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ListTrendingArtistsResponse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.ListTrendingArtistsResponse.name)
}

// optional int32 score = 2;
void ListTrendingArtistsResponse::clear_score() {
  score_ = 0;
}
 ::google::protobuf::int32 ListTrendingArtistsResponse::score() const {
  // @@protoc_insertion_point(field_get:CrowdSound.ListTrendingArtistsResponse.score)
  return score_;
}
 void ListTrendingArtistsResponse::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:CrowdSound.ListTrendingArtistsResponse.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int PostSongRequest::kNameFieldNumber;
const int PostSongRequest::kArtistFieldNumber;
const int PostSongRequest::kGenreFieldNumber;
#endif  // !_MSC_VER

PostSongRequest::PostSongRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CrowdSound.PostSongRequest)
}

void PostSongRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PostSongRequest::PostSongRequest(const PostSongRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CrowdSound.PostSongRequest)
}

void PostSongRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  genre_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PostSongRequest::~PostSongRequest() {
  // @@protoc_insertion_point(destructor:CrowdSound.PostSongRequest)
  SharedDtor();
}

void PostSongRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  genre_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PostSongRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostSongRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostSongRequest_descriptor_;
}

const PostSongRequest& PostSongRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  return *default_instance_;
}

PostSongRequest* PostSongRequest::default_instance_ = NULL;

PostSongRequest* PostSongRequest::New(::google::protobuf::Arena* arena) const {
  PostSongRequest* n = new PostSongRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PostSongRequest::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  genre_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PostSongRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CrowdSound.PostSongRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CrowdSound.PostSongRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_artist;
        break;
      }

      // optional string artist = 2;
      case 2: {
        if (tag == 18) {
         parse_artist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->artist().data(), this->artist().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CrowdSound.PostSongRequest.artist"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_genre;
        break;
      }

      // optional string genre = 3;
      case 3: {
        if (tag == 26) {
         parse_genre:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_genre()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->genre().data(), this->genre().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CrowdSound.PostSongRequest.genre"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CrowdSound.PostSongRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CrowdSound.PostSongRequest)
  return false;
#undef DO_
}

void PostSongRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CrowdSound.PostSongRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CrowdSound.PostSongRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string artist = 2;
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CrowdSound.PostSongRequest.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->artist(), output);
  }

  // optional string genre = 3;
  if (this->genre().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->genre().data(), this->genre().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CrowdSound.PostSongRequest.genre");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->genre(), output);
  }

  // @@protoc_insertion_point(serialize_end:CrowdSound.PostSongRequest)
}

::google::protobuf::uint8* PostSongRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CrowdSound.PostSongRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CrowdSound.PostSongRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string artist = 2;
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CrowdSound.PostSongRequest.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->artist(), target);
  }

  // optional string genre = 3;
  if (this->genre().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->genre().data(), this->genre().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CrowdSound.PostSongRequest.genre");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->genre(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CrowdSound.PostSongRequest)
  return target;
}

int PostSongRequest::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string artist = 2;
  if (this->artist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->artist());
  }

  // optional string genre = 3;
  if (this->genre().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->genre());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostSongRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PostSongRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PostSongRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostSongRequest::MergeFrom(const PostSongRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.artist().size() > 0) {

    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  if (from.genre().size() > 0) {

    genre_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.genre_);
  }
}

void PostSongRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostSongRequest::CopyFrom(const PostSongRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostSongRequest::IsInitialized() const {

  return true;
}

void PostSongRequest::Swap(PostSongRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PostSongRequest::InternalSwap(PostSongRequest* other) {
  name_.Swap(&other->name_);
  artist_.Swap(&other->artist_);
  genre_.Swap(&other->genre_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PostSongRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostSongRequest_descriptor_;
  metadata.reflection = PostSongRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PostSongRequest

// optional string name = 1;
void PostSongRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PostSongRequest::name() const {
  // @@protoc_insertion_point(field_get:CrowdSound.PostSongRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PostSongRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.PostSongRequest.name)
}
 void PostSongRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.PostSongRequest.name)
}
 void PostSongRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.PostSongRequest.name)
}
 ::std::string* PostSongRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.PostSongRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PostSongRequest::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PostSongRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.PostSongRequest.name)
}

// optional string artist = 2;
void PostSongRequest::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PostSongRequest::artist() const {
  // @@protoc_insertion_point(field_get:CrowdSound.PostSongRequest.artist)
  return artist_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PostSongRequest::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.PostSongRequest.artist)
}
 void PostSongRequest::set_artist(const char* value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.PostSongRequest.artist)
}
 void PostSongRequest::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.PostSongRequest.artist)
}
 ::std::string* PostSongRequest::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.PostSongRequest.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PostSongRequest::release_artist() {
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PostSongRequest::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.PostSongRequest.artist)
}

// optional string genre = 3;
void PostSongRequest::clear_genre() {
  genre_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PostSongRequest::genre() const {
  // @@protoc_insertion_point(field_get:CrowdSound.PostSongRequest.genre)
  return genre_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PostSongRequest::set_genre(const ::std::string& value) {
  
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.PostSongRequest.genre)
}
 void PostSongRequest::set_genre(const char* value) {
  
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.PostSongRequest.genre)
}
 void PostSongRequest::set_genre(const char* value, size_t size) {
  
  genre_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.PostSongRequest.genre)
}
 ::std::string* PostSongRequest::mutable_genre() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.PostSongRequest.genre)
  return genre_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PostSongRequest::release_genre() {
  
  return genre_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PostSongRequest::set_allocated_genre(::std::string* genre) {
  if (genre != NULL) {
    
  } else {
    
  }
  genre_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), genre);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.PostSongRequest.genre)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PostSongResponse::PostSongResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CrowdSound.PostSongResponse)
}

void PostSongResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PostSongResponse::PostSongResponse(const PostSongResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CrowdSound.PostSongResponse)
}

void PostSongResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PostSongResponse::~PostSongResponse() {
  // @@protoc_insertion_point(destructor:CrowdSound.PostSongResponse)
  SharedDtor();
}

void PostSongResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PostSongResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostSongResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostSongResponse_descriptor_;
}

const PostSongResponse& PostSongResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  return *default_instance_;
}

PostSongResponse* PostSongResponse::default_instance_ = NULL;

PostSongResponse* PostSongResponse::New(::google::protobuf::Arena* arena) const {
  PostSongResponse* n = new PostSongResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PostSongResponse::Clear() {
}

bool PostSongResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CrowdSound.PostSongResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:CrowdSound.PostSongResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CrowdSound.PostSongResponse)
  return false;
#undef DO_
}

void PostSongResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CrowdSound.PostSongResponse)
  // @@protoc_insertion_point(serialize_end:CrowdSound.PostSongResponse)
}

::google::protobuf::uint8* PostSongResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CrowdSound.PostSongResponse)
  // @@protoc_insertion_point(serialize_to_array_end:CrowdSound.PostSongResponse)
  return target;
}

int PostSongResponse::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostSongResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PostSongResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PostSongResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostSongResponse::MergeFrom(const PostSongResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void PostSongResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostSongResponse::CopyFrom(const PostSongResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostSongResponse::IsInitialized() const {

  return true;
}

void PostSongResponse::Swap(PostSongResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PostSongResponse::InternalSwap(PostSongResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PostSongResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostSongResponse_descriptor_;
  metadata.reflection = PostSongResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PostSongResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int VoteSongRequest::kNameFieldNumber;
const int VoteSongRequest::kArtistFieldNumber;
const int VoteSongRequest::kLikeFieldNumber;
#endif  // !_MSC_VER

VoteSongRequest::VoteSongRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CrowdSound.VoteSongRequest)
}

void VoteSongRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VoteSongRequest::VoteSongRequest(const VoteSongRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CrowdSound.VoteSongRequest)
}

void VoteSongRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  like_ = false;
}

VoteSongRequest::~VoteSongRequest() {
  // @@protoc_insertion_point(destructor:CrowdSound.VoteSongRequest)
  SharedDtor();
}

void VoteSongRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VoteSongRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteSongRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoteSongRequest_descriptor_;
}

const VoteSongRequest& VoteSongRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  return *default_instance_;
}

VoteSongRequest* VoteSongRequest::default_instance_ = NULL;

VoteSongRequest* VoteSongRequest::New(::google::protobuf::Arena* arena) const {
  VoteSongRequest* n = new VoteSongRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoteSongRequest::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  like_ = false;
}

bool VoteSongRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CrowdSound.VoteSongRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CrowdSound.VoteSongRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_artist;
        break;
      }

      // optional string artist = 2;
      case 2: {
        if (tag == 18) {
         parse_artist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->artist().data(), this->artist().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CrowdSound.VoteSongRequest.artist"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_like;
        break;
      }

      // optional bool like = 3;
      case 3: {
        if (tag == 24) {
         parse_like:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &like_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CrowdSound.VoteSongRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CrowdSound.VoteSongRequest)
  return false;
#undef DO_
}

void VoteSongRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CrowdSound.VoteSongRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CrowdSound.VoteSongRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string artist = 2;
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CrowdSound.VoteSongRequest.artist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->artist(), output);
  }

  // optional bool like = 3;
  if (this->like() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->like(), output);
  }

  // @@protoc_insertion_point(serialize_end:CrowdSound.VoteSongRequest)
}

::google::protobuf::uint8* VoteSongRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CrowdSound.VoteSongRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CrowdSound.VoteSongRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string artist = 2;
  if (this->artist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CrowdSound.VoteSongRequest.artist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->artist(), target);
  }

  // optional bool like = 3;
  if (this->like() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->like(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CrowdSound.VoteSongRequest)
  return target;
}

int VoteSongRequest::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string artist = 2;
  if (this->artist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->artist());
  }

  // optional bool like = 3;
  if (this->like() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteSongRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VoteSongRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VoteSongRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoteSongRequest::MergeFrom(const VoteSongRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.artist().size() > 0) {

    artist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.artist_);
  }
  if (from.like() != 0) {
    set_like(from.like());
  }
}

void VoteSongRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteSongRequest::CopyFrom(const VoteSongRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteSongRequest::IsInitialized() const {

  return true;
}

void VoteSongRequest::Swap(VoteSongRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoteSongRequest::InternalSwap(VoteSongRequest* other) {
  name_.Swap(&other->name_);
  artist_.Swap(&other->artist_);
  std::swap(like_, other->like_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoteSongRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoteSongRequest_descriptor_;
  metadata.reflection = VoteSongRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoteSongRequest

// optional string name = 1;
void VoteSongRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VoteSongRequest::name() const {
  // @@protoc_insertion_point(field_get:CrowdSound.VoteSongRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VoteSongRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.VoteSongRequest.name)
}
 void VoteSongRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.VoteSongRequest.name)
}
 void VoteSongRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.VoteSongRequest.name)
}
 ::std::string* VoteSongRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.VoteSongRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VoteSongRequest::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VoteSongRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.VoteSongRequest.name)
}

// optional string artist = 2;
void VoteSongRequest::clear_artist() {
  artist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VoteSongRequest::artist() const {
  // @@protoc_insertion_point(field_get:CrowdSound.VoteSongRequest.artist)
  return artist_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VoteSongRequest::set_artist(const ::std::string& value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CrowdSound.VoteSongRequest.artist)
}
 void VoteSongRequest::set_artist(const char* value) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CrowdSound.VoteSongRequest.artist)
}
 void VoteSongRequest::set_artist(const char* value, size_t size) {
  
  artist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CrowdSound.VoteSongRequest.artist)
}
 ::std::string* VoteSongRequest::mutable_artist() {
  
  // @@protoc_insertion_point(field_mutable:CrowdSound.VoteSongRequest.artist)
  return artist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VoteSongRequest::release_artist() {
  
  return artist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VoteSongRequest::set_allocated_artist(::std::string* artist) {
  if (artist != NULL) {
    
  } else {
    
  }
  artist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), artist);
  // @@protoc_insertion_point(field_set_allocated:CrowdSound.VoteSongRequest.artist)
}

// optional bool like = 3;
void VoteSongRequest::clear_like() {
  like_ = false;
}
 bool VoteSongRequest::like() const {
  // @@protoc_insertion_point(field_get:CrowdSound.VoteSongRequest.like)
  return like_;
}
 void VoteSongRequest::set_like(bool value) {
  
  like_ = value;
  // @@protoc_insertion_point(field_set:CrowdSound.VoteSongRequest.like)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VoteSongResponse::VoteSongResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CrowdSound.VoteSongResponse)
}

void VoteSongResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VoteSongResponse::VoteSongResponse(const VoteSongResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CrowdSound.VoteSongResponse)
}

void VoteSongResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

VoteSongResponse::~VoteSongResponse() {
  // @@protoc_insertion_point(destructor:CrowdSound.VoteSongResponse)
  SharedDtor();
}

void VoteSongResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VoteSongResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteSongResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VoteSongResponse_descriptor_;
}

const VoteSongResponse& VoteSongResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fcrowdsound_5fservice_2eproto();
  return *default_instance_;
}

VoteSongResponse* VoteSongResponse::default_instance_ = NULL;

VoteSongResponse* VoteSongResponse::New(::google::protobuf::Arena* arena) const {
  VoteSongResponse* n = new VoteSongResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoteSongResponse::Clear() {
}

bool VoteSongResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CrowdSound.VoteSongResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:CrowdSound.VoteSongResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CrowdSound.VoteSongResponse)
  return false;
#undef DO_
}

void VoteSongResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CrowdSound.VoteSongResponse)
  // @@protoc_insertion_point(serialize_end:CrowdSound.VoteSongResponse)
}

::google::protobuf::uint8* VoteSongResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CrowdSound.VoteSongResponse)
  // @@protoc_insertion_point(serialize_to_array_end:CrowdSound.VoteSongResponse)
  return target;
}

int VoteSongResponse::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteSongResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VoteSongResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VoteSongResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VoteSongResponse::MergeFrom(const VoteSongResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void VoteSongResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteSongResponse::CopyFrom(const VoteSongResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteSongResponse::IsInitialized() const {

  return true;
}

void VoteSongResponse::Swap(VoteSongResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoteSongResponse::InternalSwap(VoteSongResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoteSongResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VoteSongResponse_descriptor_;
  metadata.reflection = VoteSongResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VoteSongResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace CrowdSound

// @@protoc_insertion_point(global_scope)
