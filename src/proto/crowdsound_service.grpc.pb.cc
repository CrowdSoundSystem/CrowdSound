// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: proto/crowdsound_service.proto

#include "proto/crowdsound_service.pb.h"
#include "proto/crowdsound_service.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>
namespace CrowdSound {

static const char* CrowdSound_method_names[] = {
  "/CrowdSound.CrowdSound/ListSongs",
  "/CrowdSound.CrowdSound/ListTrendingArtists",
  "/CrowdSound.CrowdSound/PostSong",
  "/CrowdSound.CrowdSound/VoteSong",
};

std::unique_ptr< CrowdSound::Stub> CrowdSound::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< CrowdSound::Stub> stub(new CrowdSound::Stub(channel));
  return stub;
}

CrowdSound::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_ListSongs_(CrowdSound_method_names[0], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListTrendingArtists_(CrowdSound_method_names[1], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_PostSong_(CrowdSound_method_names[2], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_VoteSong_(CrowdSound_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::CrowdSound::ListSongsResponse>* CrowdSound::Stub::ListSongsRaw(::grpc::ClientContext* context, const ::CrowdSound::ListSongsRequest& request) {
  return new ::grpc::ClientReader< ::CrowdSound::ListSongsResponse>(channel_.get(), rpcmethod_ListSongs_, context, request);
}

::grpc::ClientAsyncReader< ::CrowdSound::ListSongsResponse>* CrowdSound::Stub::AsyncListSongsRaw(::grpc::ClientContext* context, const ::CrowdSound::ListSongsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::CrowdSound::ListSongsResponse>(channel_.get(), cq, rpcmethod_ListSongs_, context, request, tag);
}

::grpc::ClientReader< ::CrowdSound::ListTrendingArtistsResponse>* CrowdSound::Stub::ListTrendingArtistsRaw(::grpc::ClientContext* context, const ::CrowdSound::ListTrendingArtistsRequest& request) {
  return new ::grpc::ClientReader< ::CrowdSound::ListTrendingArtistsResponse>(channel_.get(), rpcmethod_ListTrendingArtists_, context, request);
}

::grpc::ClientAsyncReader< ::CrowdSound::ListTrendingArtistsResponse>* CrowdSound::Stub::AsyncListTrendingArtistsRaw(::grpc::ClientContext* context, const ::CrowdSound::ListTrendingArtistsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::CrowdSound::ListTrendingArtistsResponse>(channel_.get(), cq, rpcmethod_ListTrendingArtists_, context, request, tag);
}

::grpc::ClientWriter< ::CrowdSound::PostSongRequest>* CrowdSound::Stub::PostSongRaw(::grpc::ClientContext* context, ::CrowdSound::PostSongResponse* response) {
  return new ::grpc::ClientWriter< ::CrowdSound::PostSongRequest>(channel_.get(), rpcmethod_PostSong_, context, response);
}

::grpc::ClientAsyncWriter< ::CrowdSound::PostSongRequest>* CrowdSound::Stub::AsyncPostSongRaw(::grpc::ClientContext* context, ::CrowdSound::PostSongResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncWriter< ::CrowdSound::PostSongRequest>(channel_.get(), cq, rpcmethod_PostSong_, context, response, tag);
}

::grpc::Status CrowdSound::Stub::VoteSong(::grpc::ClientContext* context, const ::CrowdSound::VoteSongRequest& request, ::CrowdSound::VoteSongResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VoteSong_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::CrowdSound::VoteSongResponse>* CrowdSound::Stub::AsyncVoteSongRaw(::grpc::ClientContext* context, const ::CrowdSound::VoteSongRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::CrowdSound::VoteSongResponse>(channel_.get(), cq, rpcmethod_VoteSong_, context, request);
}

CrowdSound::AsyncService::AsyncService() : ::grpc::AsynchronousService(CrowdSound_method_names, 4) {}

CrowdSound::Service::~Service() {
  delete service_;
}

::grpc::Status CrowdSound::Service::ListSongs(::grpc::ServerContext* context, const ::CrowdSound::ListSongsRequest* request, ::grpc::ServerWriter< ::CrowdSound::ListSongsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void CrowdSound::AsyncService::RequestListSongs(::grpc::ServerContext* context, ::CrowdSound::ListSongsRequest* request, ::grpc::ServerAsyncWriter< ::CrowdSound::ListSongsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status CrowdSound::Service::ListTrendingArtists(::grpc::ServerContext* context, const ::CrowdSound::ListTrendingArtistsRequest* request, ::grpc::ServerWriter< ::CrowdSound::ListTrendingArtistsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void CrowdSound::AsyncService::RequestListTrendingArtists(::grpc::ServerContext* context, ::CrowdSound::ListTrendingArtistsRequest* request, ::grpc::ServerAsyncWriter< ::CrowdSound::ListTrendingArtistsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status CrowdSound::Service::PostSong(::grpc::ServerContext* context, ::grpc::ServerReader< ::CrowdSound::PostSongRequest>* reader, ::CrowdSound::PostSongResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void CrowdSound::AsyncService::RequestPostSong(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::CrowdSound::PostSongResponse, ::CrowdSound::PostSongRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
}

::grpc::Status CrowdSound::Service::VoteSong(::grpc::ServerContext* context, const ::CrowdSound::VoteSongRequest* request, ::CrowdSound::VoteSongResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void CrowdSound::AsyncService::RequestVoteSong(::grpc::ServerContext* context, ::CrowdSound::VoteSongRequest* request, ::grpc::ServerAsyncResponseWriter< ::CrowdSound::VoteSongResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* CrowdSound::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CrowdSound_method_names[0],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< CrowdSound::Service, ::CrowdSound::ListSongsRequest, ::CrowdSound::ListSongsResponse>(
          std::mem_fn(&CrowdSound::Service::ListSongs), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CrowdSound_method_names[1],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< CrowdSound::Service, ::CrowdSound::ListTrendingArtistsRequest, ::CrowdSound::ListTrendingArtistsResponse>(
          std::mem_fn(&CrowdSound::Service::ListTrendingArtists), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CrowdSound_method_names[2],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< CrowdSound::Service, ::CrowdSound::PostSongRequest, ::CrowdSound::PostSongResponse>(
          std::mem_fn(&CrowdSound::Service::PostSong), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CrowdSound_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CrowdSound::Service, ::CrowdSound::VoteSongRequest, ::CrowdSound::VoteSongResponse>(
          std::mem_fn(&CrowdSound::Service::VoteSong), this)));
  return service_;
}


}  // namespace CrowdSound

