// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: proto/crowdsound_admin_service.proto
#ifndef GRPC_proto_2fcrowdsound_5fadmin_5fservice_2eproto__INCLUDED
#define GRPC_proto_2fcrowdsound_5fadmin_5fservice_2eproto__INCLUDED

#include "proto/crowdsound_admin_service.pb.h"

#include <grpc++/support/async_stream.h>
#include <grpc++/impl/rpc_method.h>
#include <grpc++/impl/proto_utils.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/status.h>
#include <grpc++/support/stub_options.h>
#include <grpc++/support/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace CrowdSound {

class Admin GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SkipStatus(::grpc::ClientContext* context, const ::CrowdSound::SkipStatusRequest& request, ::CrowdSound::SkipStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CrowdSound::SkipStatusResponse>> AsyncSkipStatus(::grpc::ClientContext* context, const ::CrowdSound::SkipStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CrowdSound::SkipStatusResponse>>(AsyncSkipStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status Skip(::grpc::ClientContext* context, const ::CrowdSound::SkipRequest& request, ::CrowdSound::SkipResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CrowdSound::SkipResponse>> AsyncSkip(::grpc::ClientContext* context, const ::CrowdSound::SkipRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CrowdSound::SkipResponse>>(AsyncSkipRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CrowdSound::SkipStatusResponse>* AsyncSkipStatusRaw(::grpc::ClientContext* context, const ::CrowdSound::SkipStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CrowdSound::SkipResponse>* AsyncSkipRaw(::grpc::ClientContext* context, const ::CrowdSound::SkipRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::Channel>& channel);
    ::grpc::Status SkipStatus(::grpc::ClientContext* context, const ::CrowdSound::SkipStatusRequest& request, ::CrowdSound::SkipStatusResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CrowdSound::SkipStatusResponse>> AsyncSkipStatus(::grpc::ClientContext* context, const ::CrowdSound::SkipStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CrowdSound::SkipStatusResponse>>(AsyncSkipStatusRaw(context, request, cq));
    }
    ::grpc::Status Skip(::grpc::ClientContext* context, const ::CrowdSound::SkipRequest& request, ::CrowdSound::SkipResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CrowdSound::SkipResponse>> AsyncSkip(::grpc::ClientContext* context, const ::CrowdSound::SkipRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CrowdSound::SkipResponse>>(AsyncSkipRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::Channel> channel_;
    ::grpc::ClientAsyncResponseReader< ::CrowdSound::SkipStatusResponse>* AsyncSkipStatusRaw(::grpc::ClientContext* context, const ::CrowdSound::SkipStatusRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::CrowdSound::SkipResponse>* AsyncSkipRaw(::grpc::ClientContext* context, const ::CrowdSound::SkipRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_SkipStatus_;
    const ::grpc::RpcMethod rpcmethod_Skip_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::SynchronousService {
   public:
    Service() : service_(nullptr) {}
    virtual ~Service();
    virtual ::grpc::Status SkipStatus(::grpc::ServerContext* context, const ::CrowdSound::SkipStatusRequest* request, ::CrowdSound::SkipStatusResponse* response);
    virtual ::grpc::Status Skip(::grpc::ServerContext* context, const ::CrowdSound::SkipRequest* request, ::CrowdSound::SkipResponse* response);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    ::grpc::RpcService* service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService();
    ~AsyncService() {};
    void RequestSkipStatus(::grpc::ServerContext* context, ::CrowdSound::SkipStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::CrowdSound::SkipStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestSkip(::grpc::ServerContext* context, ::CrowdSound::SkipRequest* request, ::grpc::ServerAsyncResponseWriter< ::CrowdSound::SkipResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
  };
};

}  // namespace CrowdSound


#endif  // GRPC_proto_2fcrowdsound_5fadmin_5fservice_2eproto__INCLUDED
