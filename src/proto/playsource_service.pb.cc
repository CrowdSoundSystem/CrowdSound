// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/playsource_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/playsource_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PlaySource {

namespace {

const ::google::protobuf::Descriptor* Song_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Song_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueueSongRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueueSongRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueueSongResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueueSongResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPlayingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPlayingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPlayingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPlayingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPlayHistoryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPlayHistoryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPlayHistoryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPlayHistoryResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fplaysource_5fservice_2eproto() {
  protobuf_AddDesc_proto_2fplaysource_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/playsource_service.proto");
  GOOGLE_CHECK(file != NULL);
  Song_descriptor_ = file->message_type(0);
  static const int Song_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Song, song_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Song, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Song, artists_),
  };
  Song_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Song_descriptor_,
      Song::default_instance_,
      Song_offsets_,
      -1,
      -1,
      -1,
      sizeof(Song),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Song, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Song, _is_default_instance_));
  QueueSongRequest_descriptor_ = file->message_type(1);
  static const int QueueSongRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueSongRequest, song_),
  };
  QueueSongRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueueSongRequest_descriptor_,
      QueueSongRequest::default_instance_,
      QueueSongRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueueSongRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueSongRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueSongRequest, _is_default_instance_));
  QueueSongResponse_descriptor_ = file->message_type(2);
  static const int QueueSongResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueSongResponse, song_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueSongResponse, queued_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueSongResponse, found_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueSongResponse, finished_),
  };
  QueueSongResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueueSongResponse_descriptor_,
      QueueSongResponse::default_instance_,
      QueueSongResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueueSongResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueSongResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueueSongResponse, _is_default_instance_));
  GetPlayingRequest_descriptor_ = file->message_type(3);
  static const int GetPlayingRequest_offsets_[1] = {
  };
  GetPlayingRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetPlayingRequest_descriptor_,
      GetPlayingRequest::default_instance_,
      GetPlayingRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetPlayingRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayingRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayingRequest, _is_default_instance_));
  GetPlayingResponse_descriptor_ = file->message_type(4);
  static const int GetPlayingResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayingResponse, song_),
  };
  GetPlayingResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetPlayingResponse_descriptor_,
      GetPlayingResponse::default_instance_,
      GetPlayingResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetPlayingResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayingResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayingResponse, _is_default_instance_));
  GetPlayHistoryRequest_descriptor_ = file->message_type(5);
  static const int GetPlayHistoryRequest_offsets_[1] = {
  };
  GetPlayHistoryRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetPlayHistoryRequest_descriptor_,
      GetPlayHistoryRequest::default_instance_,
      GetPlayHistoryRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetPlayHistoryRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayHistoryRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayHistoryRequest, _is_default_instance_));
  GetPlayHistoryResponse_descriptor_ = file->message_type(6);
  static const int GetPlayHistoryResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayHistoryResponse, song_),
  };
  GetPlayHistoryResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetPlayHistoryResponse_descriptor_,
      GetPlayHistoryResponse::default_instance_,
      GetPlayHistoryResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetPlayHistoryResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayHistoryResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPlayHistoryResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fplaysource_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Song_descriptor_, &Song::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueueSongRequest_descriptor_, &QueueSongRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueueSongResponse_descriptor_, &QueueSongResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetPlayingRequest_descriptor_, &GetPlayingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetPlayingResponse_descriptor_, &GetPlayingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetPlayHistoryRequest_descriptor_, &GetPlayHistoryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetPlayHistoryResponse_descriptor_, &GetPlayHistoryResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fplaysource_5fservice_2eproto() {
  delete Song::default_instance_;
  delete Song_reflection_;
  delete QueueSongRequest::default_instance_;
  delete QueueSongRequest_reflection_;
  delete QueueSongResponse::default_instance_;
  delete QueueSongResponse_reflection_;
  delete GetPlayingRequest::default_instance_;
  delete GetPlayingRequest_reflection_;
  delete GetPlayingResponse::default_instance_;
  delete GetPlayingResponse_reflection_;
  delete GetPlayHistoryRequest::default_instance_;
  delete GetPlayHistoryRequest_reflection_;
  delete GetPlayHistoryResponse::default_instance_;
  delete GetPlayHistoryResponse_reflection_;
}

void protobuf_AddDesc_proto_2fplaysource_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036proto/playsource_service.proto\022\nPlaySo"
    "urce\"6\n\004Song\022\017\n\007song_id\030\001 \001(\005\022\014\n\004name\030\002 "
    "\001(\t\022\017\n\007artists\030\003 \003(\t\"2\n\020QueueSongRequest"
    "\022\036\n\004song\030\001 \001(\0132\020.PlaySource.Song\"U\n\021Queu"
    "eSongResponse\022\017\n\007song_id\030\001 \001(\005\022\016\n\006queued"
    "\030\002 \001(\010\022\r\n\005found\030\003 \001(\010\022\020\n\010finished\030\004 \001(\010\""
    "\023\n\021GetPlayingRequest\"4\n\022GetPlayingRespon"
    "se\022\036\n\004song\030\001 \001(\0132\020.PlaySource.Song\"\027\n\025Ge"
    "tPlayHistoryRequest\"8\n\026GetPlayHistoryRes"
    "ponse\022\036\n\004song\030\001 \001(\0132\020.PlaySource.Song2\210\002"
    "\n\nPlaySource\022N\n\tQueueSong\022\034.PlaySource.Q"
    "ueueSongRequest\032\035.PlaySource.QueueSongRe"
    "sponse\"\000(\0010\001\022M\n\nGetPlaying\022\035.PlaySource."
    "GetPlayingRequest\032\036.PlaySource.GetPlayin"
    "gResponse\"\000\022[\n\016GetPlayHistory\022!.PlaySour"
    "ce.GetPlayHistoryRequest\032\".PlaySource.Ge"
    "tPlayHistoryResponse\"\0000\001B\014Z\nplaysourceb\006"
    "proto3", 686);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/playsource_service.proto", &protobuf_RegisterTypes);
  Song::default_instance_ = new Song();
  QueueSongRequest::default_instance_ = new QueueSongRequest();
  QueueSongResponse::default_instance_ = new QueueSongResponse();
  GetPlayingRequest::default_instance_ = new GetPlayingRequest();
  GetPlayingResponse::default_instance_ = new GetPlayingResponse();
  GetPlayHistoryRequest::default_instance_ = new GetPlayHistoryRequest();
  GetPlayHistoryResponse::default_instance_ = new GetPlayHistoryResponse();
  Song::default_instance_->InitAsDefaultInstance();
  QueueSongRequest::default_instance_->InitAsDefaultInstance();
  QueueSongResponse::default_instance_->InitAsDefaultInstance();
  GetPlayingRequest::default_instance_->InitAsDefaultInstance();
  GetPlayingResponse::default_instance_->InitAsDefaultInstance();
  GetPlayHistoryRequest::default_instance_->InitAsDefaultInstance();
  GetPlayHistoryResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fplaysource_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fplaysource_5fservice_2eproto {
  StaticDescriptorInitializer_proto_2fplaysource_5fservice_2eproto() {
    protobuf_AddDesc_proto_2fplaysource_5fservice_2eproto();
  }
} static_descriptor_initializer_proto_2fplaysource_5fservice_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Song::kSongIdFieldNumber;
const int Song::kNameFieldNumber;
const int Song::kArtistsFieldNumber;
#endif  // !_MSC_VER

Song::Song()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlaySource.Song)
}

void Song::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Song::Song(const Song& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlaySource.Song)
}

void Song::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  song_id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Song::~Song() {
  // @@protoc_insertion_point(destructor:PlaySource.Song)
  SharedDtor();
}

void Song::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Song::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Song::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Song_descriptor_;
}

const Song& Song::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fplaysource_5fservice_2eproto();
  return *default_instance_;
}

Song* Song::default_instance_ = NULL;

Song* Song::New(::google::protobuf::Arena* arena) const {
  Song* n = new Song;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Song::Clear() {
  song_id_ = 0;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artists_.Clear();
}

bool Song::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlaySource.Song)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 song_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &song_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlaySource.Song.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_artists;
        break;
      }

      // repeated string artists = 3;
      case 3: {
        if (tag == 26) {
         parse_artists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_artists()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->artists(this->artists_size() - 1).data(),
            this->artists(this->artists_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PlaySource.Song.artists"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_artists;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlaySource.Song)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlaySource.Song)
  return false;
#undef DO_
}

void Song::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlaySource.Song)
  // optional int32 song_id = 1;
  if (this->song_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->song_id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlaySource.Song.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated string artists = 3;
  for (int i = 0; i < this->artists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artists(i).data(), this->artists(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlaySource.Song.artists");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->artists(i), output);
  }

  // @@protoc_insertion_point(serialize_end:PlaySource.Song)
}

::google::protobuf::uint8* Song::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaySource.Song)
  // optional int32 song_id = 1;
  if (this->song_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->song_id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlaySource.Song.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated string artists = 3;
  for (int i = 0; i < this->artists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->artists(i).data(), this->artists(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PlaySource.Song.artists");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->artists(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PlaySource.Song)
  return target;
}

int Song::ByteSize() const {
  int total_size = 0;

  // optional int32 song_id = 1;
  if (this->song_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->song_id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated string artists = 3;
  total_size += 1 * this->artists_size();
  for (int i = 0; i < this->artists_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->artists(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Song::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Song* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Song>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Song::MergeFrom(const Song& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  artists_.MergeFrom(from.artists_);
  if (from.song_id() != 0) {
    set_song_id(from.song_id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Song::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Song::CopyFrom(const Song& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Song::IsInitialized() const {

  return true;
}

void Song::Swap(Song* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Song::InternalSwap(Song* other) {
  std::swap(song_id_, other->song_id_);
  name_.Swap(&other->name_);
  artists_.UnsafeArenaSwap(&other->artists_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Song::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Song_descriptor_;
  metadata.reflection = Song_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Song

// optional int32 song_id = 1;
void Song::clear_song_id() {
  song_id_ = 0;
}
 ::google::protobuf::int32 Song::song_id() const {
  // @@protoc_insertion_point(field_get:PlaySource.Song.song_id)
  return song_id_;
}
 void Song::set_song_id(::google::protobuf::int32 value) {
  
  song_id_ = value;
  // @@protoc_insertion_point(field_set:PlaySource.Song.song_id)
}

// optional string name = 2;
void Song::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Song::name() const {
  // @@protoc_insertion_point(field_get:PlaySource.Song.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Song::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlaySource.Song.name)
}
 void Song::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlaySource.Song.name)
}
 void Song::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlaySource.Song.name)
}
 ::std::string* Song::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:PlaySource.Song.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Song::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Song::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PlaySource.Song.name)
}

// repeated string artists = 3;
int Song::artists_size() const {
  return artists_.size();
}
void Song::clear_artists() {
  artists_.Clear();
}
 const ::std::string& Song::artists(int index) const {
  // @@protoc_insertion_point(field_get:PlaySource.Song.artists)
  return artists_.Get(index);
}
 ::std::string* Song::mutable_artists(int index) {
  // @@protoc_insertion_point(field_mutable:PlaySource.Song.artists)
  return artists_.Mutable(index);
}
 void Song::set_artists(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:PlaySource.Song.artists)
  artists_.Mutable(index)->assign(value);
}
 void Song::set_artists(int index, const char* value) {
  artists_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PlaySource.Song.artists)
}
 void Song::set_artists(int index, const char* value, size_t size) {
  artists_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PlaySource.Song.artists)
}
 ::std::string* Song::add_artists() {
  return artists_.Add();
}
 void Song::add_artists(const ::std::string& value) {
  artists_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PlaySource.Song.artists)
}
 void Song::add_artists(const char* value) {
  artists_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PlaySource.Song.artists)
}
 void Song::add_artists(const char* value, size_t size) {
  artists_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PlaySource.Song.artists)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Song::artists() const {
  // @@protoc_insertion_point(field_list:PlaySource.Song.artists)
  return artists_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Song::mutable_artists() {
  // @@protoc_insertion_point(field_mutable_list:PlaySource.Song.artists)
  return &artists_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int QueueSongRequest::kSongFieldNumber;
#endif  // !_MSC_VER

QueueSongRequest::QueueSongRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlaySource.QueueSongRequest)
}

void QueueSongRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  song_ = const_cast< ::PlaySource::Song*>(&::PlaySource::Song::default_instance());
}

QueueSongRequest::QueueSongRequest(const QueueSongRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlaySource.QueueSongRequest)
}

void QueueSongRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  song_ = NULL;
}

QueueSongRequest::~QueueSongRequest() {
  // @@protoc_insertion_point(destructor:PlaySource.QueueSongRequest)
  SharedDtor();
}

void QueueSongRequest::SharedDtor() {
  if (this != default_instance_) {
    delete song_;
  }
}

void QueueSongRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueueSongRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueueSongRequest_descriptor_;
}

const QueueSongRequest& QueueSongRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fplaysource_5fservice_2eproto();
  return *default_instance_;
}

QueueSongRequest* QueueSongRequest::default_instance_ = NULL;

QueueSongRequest* QueueSongRequest::New(::google::protobuf::Arena* arena) const {
  QueueSongRequest* n = new QueueSongRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueueSongRequest::Clear() {
  if (GetArenaNoVirtual() == NULL && song_ != NULL) delete song_;
  song_ = NULL;
}

bool QueueSongRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlaySource.QueueSongRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlaySource.Song song = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_song()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlaySource.QueueSongRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlaySource.QueueSongRequest)
  return false;
#undef DO_
}

void QueueSongRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlaySource.QueueSongRequest)
  // optional .PlaySource.Song song = 1;
  if (this->has_song()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->song_, output);
  }

  // @@protoc_insertion_point(serialize_end:PlaySource.QueueSongRequest)
}

::google::protobuf::uint8* QueueSongRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaySource.QueueSongRequest)
  // optional .PlaySource.Song song = 1;
  if (this->has_song()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->song_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PlaySource.QueueSongRequest)
  return target;
}

int QueueSongRequest::ByteSize() const {
  int total_size = 0;

  // optional .PlaySource.Song song = 1;
  if (this->has_song()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->song_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueueSongRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueueSongRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueueSongRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueueSongRequest::MergeFrom(const QueueSongRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_song()) {
    mutable_song()->::PlaySource::Song::MergeFrom(from.song());
  }
}

void QueueSongRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueueSongRequest::CopyFrom(const QueueSongRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueSongRequest::IsInitialized() const {

  return true;
}

void QueueSongRequest::Swap(QueueSongRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueueSongRequest::InternalSwap(QueueSongRequest* other) {
  std::swap(song_, other->song_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueueSongRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueueSongRequest_descriptor_;
  metadata.reflection = QueueSongRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueueSongRequest

// optional .PlaySource.Song song = 1;
bool QueueSongRequest::has_song() const {
  return !_is_default_instance_ && song_ != NULL;
}
void QueueSongRequest::clear_song() {
  if (GetArenaNoVirtual() == NULL && song_ != NULL) delete song_;
  song_ = NULL;
}
const ::PlaySource::Song& QueueSongRequest::song() const {
  // @@protoc_insertion_point(field_get:PlaySource.QueueSongRequest.song)
  return song_ != NULL ? *song_ : *default_instance_->song_;
}
::PlaySource::Song* QueueSongRequest::mutable_song() {
  
  if (song_ == NULL) {
    song_ = new ::PlaySource::Song;
  }
  // @@protoc_insertion_point(field_mutable:PlaySource.QueueSongRequest.song)
  return song_;
}
::PlaySource::Song* QueueSongRequest::release_song() {
  
  ::PlaySource::Song* temp = song_;
  song_ = NULL;
  return temp;
}
void QueueSongRequest::set_allocated_song(::PlaySource::Song* song) {
  delete song_;
  song_ = song;
  if (song) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PlaySource.QueueSongRequest.song)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int QueueSongResponse::kSongIdFieldNumber;
const int QueueSongResponse::kQueuedFieldNumber;
const int QueueSongResponse::kFoundFieldNumber;
const int QueueSongResponse::kFinishedFieldNumber;
#endif  // !_MSC_VER

QueueSongResponse::QueueSongResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlaySource.QueueSongResponse)
}

void QueueSongResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

QueueSongResponse::QueueSongResponse(const QueueSongResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlaySource.QueueSongResponse)
}

void QueueSongResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  song_id_ = 0;
  queued_ = false;
  found_ = false;
  finished_ = false;
}

QueueSongResponse::~QueueSongResponse() {
  // @@protoc_insertion_point(destructor:PlaySource.QueueSongResponse)
  SharedDtor();
}

void QueueSongResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueueSongResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueueSongResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueueSongResponse_descriptor_;
}

const QueueSongResponse& QueueSongResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fplaysource_5fservice_2eproto();
  return *default_instance_;
}

QueueSongResponse* QueueSongResponse::default_instance_ = NULL;

QueueSongResponse* QueueSongResponse::New(::google::protobuf::Arena* arena) const {
  QueueSongResponse* n = new QueueSongResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueueSongResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QueueSongResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(song_id_, finished_);

#undef ZR_HELPER_
#undef ZR_

}

bool QueueSongResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlaySource.QueueSongResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 song_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &song_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_queued;
        break;
      }

      // optional bool queued = 2;
      case 2: {
        if (tag == 16) {
         parse_queued:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &queued_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_found;
        break;
      }

      // optional bool found = 3;
      case 3: {
        if (tag == 24) {
         parse_found:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &found_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_finished;
        break;
      }

      // optional bool finished = 4;
      case 4: {
        if (tag == 32) {
         parse_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finished_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlaySource.QueueSongResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlaySource.QueueSongResponse)
  return false;
#undef DO_
}

void QueueSongResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlaySource.QueueSongResponse)
  // optional int32 song_id = 1;
  if (this->song_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->song_id(), output);
  }

  // optional bool queued = 2;
  if (this->queued() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->queued(), output);
  }

  // optional bool found = 3;
  if (this->found() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->found(), output);
  }

  // optional bool finished = 4;
  if (this->finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->finished(), output);
  }

  // @@protoc_insertion_point(serialize_end:PlaySource.QueueSongResponse)
}

::google::protobuf::uint8* QueueSongResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaySource.QueueSongResponse)
  // optional int32 song_id = 1;
  if (this->song_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->song_id(), target);
  }

  // optional bool queued = 2;
  if (this->queued() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->queued(), target);
  }

  // optional bool found = 3;
  if (this->found() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->found(), target);
  }

  // optional bool finished = 4;
  if (this->finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->finished(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PlaySource.QueueSongResponse)
  return target;
}

int QueueSongResponse::ByteSize() const {
  int total_size = 0;

  // optional int32 song_id = 1;
  if (this->song_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->song_id());
  }

  // optional bool queued = 2;
  if (this->queued() != 0) {
    total_size += 1 + 1;
  }

  // optional bool found = 3;
  if (this->found() != 0) {
    total_size += 1 + 1;
  }

  // optional bool finished = 4;
  if (this->finished() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueueSongResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueueSongResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const QueueSongResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueueSongResponse::MergeFrom(const QueueSongResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.song_id() != 0) {
    set_song_id(from.song_id());
  }
  if (from.queued() != 0) {
    set_queued(from.queued());
  }
  if (from.found() != 0) {
    set_found(from.found());
  }
  if (from.finished() != 0) {
    set_finished(from.finished());
  }
}

void QueueSongResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueueSongResponse::CopyFrom(const QueueSongResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueSongResponse::IsInitialized() const {

  return true;
}

void QueueSongResponse::Swap(QueueSongResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueueSongResponse::InternalSwap(QueueSongResponse* other) {
  std::swap(song_id_, other->song_id_);
  std::swap(queued_, other->queued_);
  std::swap(found_, other->found_);
  std::swap(finished_, other->finished_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueueSongResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueueSongResponse_descriptor_;
  metadata.reflection = QueueSongResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueueSongResponse

// optional int32 song_id = 1;
void QueueSongResponse::clear_song_id() {
  song_id_ = 0;
}
 ::google::protobuf::int32 QueueSongResponse::song_id() const {
  // @@protoc_insertion_point(field_get:PlaySource.QueueSongResponse.song_id)
  return song_id_;
}
 void QueueSongResponse::set_song_id(::google::protobuf::int32 value) {
  
  song_id_ = value;
  // @@protoc_insertion_point(field_set:PlaySource.QueueSongResponse.song_id)
}

// optional bool queued = 2;
void QueueSongResponse::clear_queued() {
  queued_ = false;
}
 bool QueueSongResponse::queued() const {
  // @@protoc_insertion_point(field_get:PlaySource.QueueSongResponse.queued)
  return queued_;
}
 void QueueSongResponse::set_queued(bool value) {
  
  queued_ = value;
  // @@protoc_insertion_point(field_set:PlaySource.QueueSongResponse.queued)
}

// optional bool found = 3;
void QueueSongResponse::clear_found() {
  found_ = false;
}
 bool QueueSongResponse::found() const {
  // @@protoc_insertion_point(field_get:PlaySource.QueueSongResponse.found)
  return found_;
}
 void QueueSongResponse::set_found(bool value) {
  
  found_ = value;
  // @@protoc_insertion_point(field_set:PlaySource.QueueSongResponse.found)
}

// optional bool finished = 4;
void QueueSongResponse::clear_finished() {
  finished_ = false;
}
 bool QueueSongResponse::finished() const {
  // @@protoc_insertion_point(field_get:PlaySource.QueueSongResponse.finished)
  return finished_;
}
 void QueueSongResponse::set_finished(bool value) {
  
  finished_ = value;
  // @@protoc_insertion_point(field_set:PlaySource.QueueSongResponse.finished)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetPlayingRequest::GetPlayingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlaySource.GetPlayingRequest)
}

void GetPlayingRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetPlayingRequest::GetPlayingRequest(const GetPlayingRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlaySource.GetPlayingRequest)
}

void GetPlayingRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetPlayingRequest::~GetPlayingRequest() {
  // @@protoc_insertion_point(destructor:PlaySource.GetPlayingRequest)
  SharedDtor();
}

void GetPlayingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPlayingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPlayingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPlayingRequest_descriptor_;
}

const GetPlayingRequest& GetPlayingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fplaysource_5fservice_2eproto();
  return *default_instance_;
}

GetPlayingRequest* GetPlayingRequest::default_instance_ = NULL;

GetPlayingRequest* GetPlayingRequest::New(::google::protobuf::Arena* arena) const {
  GetPlayingRequest* n = new GetPlayingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPlayingRequest::Clear() {
}

bool GetPlayingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlaySource.GetPlayingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:PlaySource.GetPlayingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlaySource.GetPlayingRequest)
  return false;
#undef DO_
}

void GetPlayingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlaySource.GetPlayingRequest)
  // @@protoc_insertion_point(serialize_end:PlaySource.GetPlayingRequest)
}

::google::protobuf::uint8* GetPlayingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaySource.GetPlayingRequest)
  // @@protoc_insertion_point(serialize_to_array_end:PlaySource.GetPlayingRequest)
  return target;
}

int GetPlayingRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPlayingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetPlayingRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPlayingRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPlayingRequest::MergeFrom(const GetPlayingRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void GetPlayingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayingRequest::CopyFrom(const GetPlayingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayingRequest::IsInitialized() const {

  return true;
}

void GetPlayingRequest::Swap(GetPlayingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPlayingRequest::InternalSwap(GetPlayingRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPlayingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPlayingRequest_descriptor_;
  metadata.reflection = GetPlayingRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPlayingRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetPlayingResponse::kSongFieldNumber;
#endif  // !_MSC_VER

GetPlayingResponse::GetPlayingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlaySource.GetPlayingResponse)
}

void GetPlayingResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  song_ = const_cast< ::PlaySource::Song*>(&::PlaySource::Song::default_instance());
}

GetPlayingResponse::GetPlayingResponse(const GetPlayingResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlaySource.GetPlayingResponse)
}

void GetPlayingResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  song_ = NULL;
}

GetPlayingResponse::~GetPlayingResponse() {
  // @@protoc_insertion_point(destructor:PlaySource.GetPlayingResponse)
  SharedDtor();
}

void GetPlayingResponse::SharedDtor() {
  if (this != default_instance_) {
    delete song_;
  }
}

void GetPlayingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPlayingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPlayingResponse_descriptor_;
}

const GetPlayingResponse& GetPlayingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fplaysource_5fservice_2eproto();
  return *default_instance_;
}

GetPlayingResponse* GetPlayingResponse::default_instance_ = NULL;

GetPlayingResponse* GetPlayingResponse::New(::google::protobuf::Arena* arena) const {
  GetPlayingResponse* n = new GetPlayingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPlayingResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && song_ != NULL) delete song_;
  song_ = NULL;
}

bool GetPlayingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlaySource.GetPlayingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlaySource.Song song = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_song()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlaySource.GetPlayingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlaySource.GetPlayingResponse)
  return false;
#undef DO_
}

void GetPlayingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlaySource.GetPlayingResponse)
  // optional .PlaySource.Song song = 1;
  if (this->has_song()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->song_, output);
  }

  // @@protoc_insertion_point(serialize_end:PlaySource.GetPlayingResponse)
}

::google::protobuf::uint8* GetPlayingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaySource.GetPlayingResponse)
  // optional .PlaySource.Song song = 1;
  if (this->has_song()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->song_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PlaySource.GetPlayingResponse)
  return target;
}

int GetPlayingResponse::ByteSize() const {
  int total_size = 0;

  // optional .PlaySource.Song song = 1;
  if (this->has_song()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->song_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPlayingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetPlayingResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPlayingResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPlayingResponse::MergeFrom(const GetPlayingResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_song()) {
    mutable_song()->::PlaySource::Song::MergeFrom(from.song());
  }
}

void GetPlayingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayingResponse::CopyFrom(const GetPlayingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayingResponse::IsInitialized() const {

  return true;
}

void GetPlayingResponse::Swap(GetPlayingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPlayingResponse::InternalSwap(GetPlayingResponse* other) {
  std::swap(song_, other->song_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPlayingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPlayingResponse_descriptor_;
  metadata.reflection = GetPlayingResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPlayingResponse

// optional .PlaySource.Song song = 1;
bool GetPlayingResponse::has_song() const {
  return !_is_default_instance_ && song_ != NULL;
}
void GetPlayingResponse::clear_song() {
  if (GetArenaNoVirtual() == NULL && song_ != NULL) delete song_;
  song_ = NULL;
}
const ::PlaySource::Song& GetPlayingResponse::song() const {
  // @@protoc_insertion_point(field_get:PlaySource.GetPlayingResponse.song)
  return song_ != NULL ? *song_ : *default_instance_->song_;
}
::PlaySource::Song* GetPlayingResponse::mutable_song() {
  
  if (song_ == NULL) {
    song_ = new ::PlaySource::Song;
  }
  // @@protoc_insertion_point(field_mutable:PlaySource.GetPlayingResponse.song)
  return song_;
}
::PlaySource::Song* GetPlayingResponse::release_song() {
  
  ::PlaySource::Song* temp = song_;
  song_ = NULL;
  return temp;
}
void GetPlayingResponse::set_allocated_song(::PlaySource::Song* song) {
  delete song_;
  song_ = song;
  if (song) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PlaySource.GetPlayingResponse.song)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetPlayHistoryRequest::GetPlayHistoryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlaySource.GetPlayHistoryRequest)
}

void GetPlayHistoryRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetPlayHistoryRequest::GetPlayHistoryRequest(const GetPlayHistoryRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlaySource.GetPlayHistoryRequest)
}

void GetPlayHistoryRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetPlayHistoryRequest::~GetPlayHistoryRequest() {
  // @@protoc_insertion_point(destructor:PlaySource.GetPlayHistoryRequest)
  SharedDtor();
}

void GetPlayHistoryRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPlayHistoryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPlayHistoryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPlayHistoryRequest_descriptor_;
}

const GetPlayHistoryRequest& GetPlayHistoryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fplaysource_5fservice_2eproto();
  return *default_instance_;
}

GetPlayHistoryRequest* GetPlayHistoryRequest::default_instance_ = NULL;

GetPlayHistoryRequest* GetPlayHistoryRequest::New(::google::protobuf::Arena* arena) const {
  GetPlayHistoryRequest* n = new GetPlayHistoryRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPlayHistoryRequest::Clear() {
}

bool GetPlayHistoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlaySource.GetPlayHistoryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:PlaySource.GetPlayHistoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlaySource.GetPlayHistoryRequest)
  return false;
#undef DO_
}

void GetPlayHistoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlaySource.GetPlayHistoryRequest)
  // @@protoc_insertion_point(serialize_end:PlaySource.GetPlayHistoryRequest)
}

::google::protobuf::uint8* GetPlayHistoryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaySource.GetPlayHistoryRequest)
  // @@protoc_insertion_point(serialize_to_array_end:PlaySource.GetPlayHistoryRequest)
  return target;
}

int GetPlayHistoryRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPlayHistoryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetPlayHistoryRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPlayHistoryRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPlayHistoryRequest::MergeFrom(const GetPlayHistoryRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void GetPlayHistoryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayHistoryRequest::CopyFrom(const GetPlayHistoryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayHistoryRequest::IsInitialized() const {

  return true;
}

void GetPlayHistoryRequest::Swap(GetPlayHistoryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPlayHistoryRequest::InternalSwap(GetPlayHistoryRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPlayHistoryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPlayHistoryRequest_descriptor_;
  metadata.reflection = GetPlayHistoryRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPlayHistoryRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetPlayHistoryResponse::kSongFieldNumber;
#endif  // !_MSC_VER

GetPlayHistoryResponse::GetPlayHistoryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlaySource.GetPlayHistoryResponse)
}

void GetPlayHistoryResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  song_ = const_cast< ::PlaySource::Song*>(&::PlaySource::Song::default_instance());
}

GetPlayHistoryResponse::GetPlayHistoryResponse(const GetPlayHistoryResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlaySource.GetPlayHistoryResponse)
}

void GetPlayHistoryResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  song_ = NULL;
}

GetPlayHistoryResponse::~GetPlayHistoryResponse() {
  // @@protoc_insertion_point(destructor:PlaySource.GetPlayHistoryResponse)
  SharedDtor();
}

void GetPlayHistoryResponse::SharedDtor() {
  if (this != default_instance_) {
    delete song_;
  }
}

void GetPlayHistoryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPlayHistoryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPlayHistoryResponse_descriptor_;
}

const GetPlayHistoryResponse& GetPlayHistoryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fplaysource_5fservice_2eproto();
  return *default_instance_;
}

GetPlayHistoryResponse* GetPlayHistoryResponse::default_instance_ = NULL;

GetPlayHistoryResponse* GetPlayHistoryResponse::New(::google::protobuf::Arena* arena) const {
  GetPlayHistoryResponse* n = new GetPlayHistoryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetPlayHistoryResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && song_ != NULL) delete song_;
  song_ = NULL;
}

bool GetPlayHistoryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlaySource.GetPlayHistoryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlaySource.Song song = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_song()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlaySource.GetPlayHistoryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlaySource.GetPlayHistoryResponse)
  return false;
#undef DO_
}

void GetPlayHistoryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlaySource.GetPlayHistoryResponse)
  // optional .PlaySource.Song song = 1;
  if (this->has_song()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->song_, output);
  }

  // @@protoc_insertion_point(serialize_end:PlaySource.GetPlayHistoryResponse)
}

::google::protobuf::uint8* GetPlayHistoryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlaySource.GetPlayHistoryResponse)
  // optional .PlaySource.Song song = 1;
  if (this->has_song()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->song_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PlaySource.GetPlayHistoryResponse)
  return target;
}

int GetPlayHistoryResponse::ByteSize() const {
  int total_size = 0;

  // optional .PlaySource.Song song = 1;
  if (this->has_song()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->song_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPlayHistoryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetPlayHistoryResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetPlayHistoryResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPlayHistoryResponse::MergeFrom(const GetPlayHistoryResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_song()) {
    mutable_song()->::PlaySource::Song::MergeFrom(from.song());
  }
}

void GetPlayHistoryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPlayHistoryResponse::CopyFrom(const GetPlayHistoryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlayHistoryResponse::IsInitialized() const {

  return true;
}

void GetPlayHistoryResponse::Swap(GetPlayHistoryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPlayHistoryResponse::InternalSwap(GetPlayHistoryResponse* other) {
  std::swap(song_, other->song_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetPlayHistoryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPlayHistoryResponse_descriptor_;
  metadata.reflection = GetPlayHistoryResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetPlayHistoryResponse

// optional .PlaySource.Song song = 1;
bool GetPlayHistoryResponse::has_song() const {
  return !_is_default_instance_ && song_ != NULL;
}
void GetPlayHistoryResponse::clear_song() {
  if (GetArenaNoVirtual() == NULL && song_ != NULL) delete song_;
  song_ = NULL;
}
const ::PlaySource::Song& GetPlayHistoryResponse::song() const {
  // @@protoc_insertion_point(field_get:PlaySource.GetPlayHistoryResponse.song)
  return song_ != NULL ? *song_ : *default_instance_->song_;
}
::PlaySource::Song* GetPlayHistoryResponse::mutable_song() {
  
  if (song_ == NULL) {
    song_ = new ::PlaySource::Song;
  }
  // @@protoc_insertion_point(field_mutable:PlaySource.GetPlayHistoryResponse.song)
  return song_;
}
::PlaySource::Song* GetPlayHistoryResponse::release_song() {
  
  ::PlaySource::Song* temp = song_;
  song_ = NULL;
  return temp;
}
void GetPlayHistoryResponse::set_allocated_song(::PlaySource::Song* song) {
  delete song_;
  song_ = song;
  if (song) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PlaySource.GetPlayHistoryResponse.song)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace PlaySource

// @@protoc_insertion_point(global_scope)
