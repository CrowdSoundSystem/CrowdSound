// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: proto/crowdsound_service.proto
#ifndef GRPC_proto_2fcrowdsound_5fservice_2eproto__INCLUDED
#define GRPC_proto_2fcrowdsound_5fservice_2eproto__INCLUDED

#include "proto/crowdsound_service.pb.h"

#include <grpc++/support/async_stream.h>
#include <grpc++/impl/rpc_method.h>
#include <grpc++/impl/proto_utils.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/status.h>
#include <grpc++/support/stub_options.h>
#include <grpc++/support/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace CrowdSound {

class CrowdSound GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::CrowdSound::ListSongsResponse>> ListSongs(::grpc::ClientContext* context, const ::CrowdSound::ListSongsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::CrowdSound::ListSongsResponse>>(ListSongsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::CrowdSound::ListSongsResponse>> AsyncListSongs(::grpc::ClientContext* context, const ::CrowdSound::ListSongsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::CrowdSound::ListSongsResponse>>(AsyncListSongsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::CrowdSound::ListTrendingArtistsResponse>> ListTrendingArtists(::grpc::ClientContext* context, const ::CrowdSound::ListTrendingArtistsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::CrowdSound::ListTrendingArtistsResponse>>(ListTrendingArtistsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::CrowdSound::ListTrendingArtistsResponse>> AsyncListTrendingArtists(::grpc::ClientContext* context, const ::CrowdSound::ListTrendingArtistsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::CrowdSound::ListTrendingArtistsResponse>>(AsyncListTrendingArtistsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::CrowdSound::PostSongRequest>> PostSong(::grpc::ClientContext* context, ::CrowdSound::PostSongResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::CrowdSound::PostSongRequest>>(PostSongRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::CrowdSound::PostSongRequest>> AsyncPostSong(::grpc::ClientContext* context, ::CrowdSound::PostSongResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::CrowdSound::PostSongRequest>>(AsyncPostSongRaw(context, response, cq, tag));
    }
    virtual ::grpc::Status VoteSong(::grpc::ClientContext* context, const ::CrowdSound::VoteSongRequest& request, ::CrowdSound::VoteSongResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CrowdSound::VoteSongResponse>> AsyncVoteSong(::grpc::ClientContext* context, const ::CrowdSound::VoteSongRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::CrowdSound::VoteSongResponse>>(AsyncVoteSongRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientReaderInterface< ::CrowdSound::ListSongsResponse>* ListSongsRaw(::grpc::ClientContext* context, const ::CrowdSound::ListSongsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::CrowdSound::ListSongsResponse>* AsyncListSongsRaw(::grpc::ClientContext* context, const ::CrowdSound::ListSongsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::CrowdSound::ListTrendingArtistsResponse>* ListTrendingArtistsRaw(::grpc::ClientContext* context, const ::CrowdSound::ListTrendingArtistsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::CrowdSound::ListTrendingArtistsResponse>* AsyncListTrendingArtistsRaw(::grpc::ClientContext* context, const ::CrowdSound::ListTrendingArtistsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientWriterInterface< ::CrowdSound::PostSongRequest>* PostSongRaw(::grpc::ClientContext* context, ::CrowdSound::PostSongResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::CrowdSound::PostSongRequest>* AsyncPostSongRaw(::grpc::ClientContext* context, ::CrowdSound::PostSongResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::CrowdSound::VoteSongResponse>* AsyncVoteSongRaw(::grpc::ClientContext* context, const ::CrowdSound::VoteSongRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::Channel>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::CrowdSound::ListSongsResponse>> ListSongs(::grpc::ClientContext* context, const ::CrowdSound::ListSongsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::CrowdSound::ListSongsResponse>>(ListSongsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::CrowdSound::ListSongsResponse>> AsyncListSongs(::grpc::ClientContext* context, const ::CrowdSound::ListSongsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::CrowdSound::ListSongsResponse>>(AsyncListSongsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::CrowdSound::ListTrendingArtistsResponse>> ListTrendingArtists(::grpc::ClientContext* context, const ::CrowdSound::ListTrendingArtistsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::CrowdSound::ListTrendingArtistsResponse>>(ListTrendingArtistsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::CrowdSound::ListTrendingArtistsResponse>> AsyncListTrendingArtists(::grpc::ClientContext* context, const ::CrowdSound::ListTrendingArtistsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::CrowdSound::ListTrendingArtistsResponse>>(AsyncListTrendingArtistsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::CrowdSound::PostSongRequest>> PostSong(::grpc::ClientContext* context, ::CrowdSound::PostSongResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::CrowdSound::PostSongRequest>>(PostSongRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::CrowdSound::PostSongRequest>> AsyncPostSong(::grpc::ClientContext* context, ::CrowdSound::PostSongResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::CrowdSound::PostSongRequest>>(AsyncPostSongRaw(context, response, cq, tag));
    }
    ::grpc::Status VoteSong(::grpc::ClientContext* context, const ::CrowdSound::VoteSongRequest& request, ::CrowdSound::VoteSongResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CrowdSound::VoteSongResponse>> AsyncVoteSong(::grpc::ClientContext* context, const ::CrowdSound::VoteSongRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::CrowdSound::VoteSongResponse>>(AsyncVoteSongRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::Channel> channel_;
    ::grpc::ClientReader< ::CrowdSound::ListSongsResponse>* ListSongsRaw(::grpc::ClientContext* context, const ::CrowdSound::ListSongsRequest& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::CrowdSound::ListSongsResponse>* AsyncListSongsRaw(::grpc::ClientContext* context, const ::CrowdSound::ListSongsRequest& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::CrowdSound::ListTrendingArtistsResponse>* ListTrendingArtistsRaw(::grpc::ClientContext* context, const ::CrowdSound::ListTrendingArtistsRequest& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::CrowdSound::ListTrendingArtistsResponse>* AsyncListTrendingArtistsRaw(::grpc::ClientContext* context, const ::CrowdSound::ListTrendingArtistsRequest& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientWriter< ::CrowdSound::PostSongRequest>* PostSongRaw(::grpc::ClientContext* context, ::CrowdSound::PostSongResponse* response) GRPC_OVERRIDE;
    ::grpc::ClientAsyncWriter< ::CrowdSound::PostSongRequest>* AsyncPostSongRaw(::grpc::ClientContext* context, ::CrowdSound::PostSongResponse* response, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::CrowdSound::VoteSongResponse>* AsyncVoteSongRaw(::grpc::ClientContext* context, const ::CrowdSound::VoteSongRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_ListSongs_;
    const ::grpc::RpcMethod rpcmethod_ListTrendingArtists_;
    const ::grpc::RpcMethod rpcmethod_PostSong_;
    const ::grpc::RpcMethod rpcmethod_VoteSong_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::SynchronousService {
   public:
    Service() : service_(nullptr) {}
    virtual ~Service();
    virtual ::grpc::Status ListSongs(::grpc::ServerContext* context, const ::CrowdSound::ListSongsRequest* request, ::grpc::ServerWriter< ::CrowdSound::ListSongsResponse>* writer);
    virtual ::grpc::Status ListTrendingArtists(::grpc::ServerContext* context, const ::CrowdSound::ListTrendingArtistsRequest* request, ::grpc::ServerWriter< ::CrowdSound::ListTrendingArtistsResponse>* writer);
    virtual ::grpc::Status PostSong(::grpc::ServerContext* context, ::grpc::ServerReader< ::CrowdSound::PostSongRequest>* reader, ::CrowdSound::PostSongResponse* response);
    virtual ::grpc::Status VoteSong(::grpc::ServerContext* context, const ::CrowdSound::VoteSongRequest* request, ::CrowdSound::VoteSongResponse* response);
    ::grpc::RpcService* service() GRPC_OVERRIDE GRPC_FINAL;
   private:
    ::grpc::RpcService* service_;
  };
  class AsyncService GRPC_FINAL : public ::grpc::AsynchronousService {
   public:
    explicit AsyncService();
    ~AsyncService() {};
    void RequestListSongs(::grpc::ServerContext* context, ::CrowdSound::ListSongsRequest* request, ::grpc::ServerAsyncWriter< ::CrowdSound::ListSongsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestListTrendingArtists(::grpc::ServerContext* context, ::CrowdSound::ListTrendingArtistsRequest* request, ::grpc::ServerAsyncWriter< ::CrowdSound::ListTrendingArtistsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestPostSong(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::CrowdSound::PostSongResponse, ::CrowdSound::PostSongRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
    void RequestVoteSong(::grpc::ServerContext* context, ::CrowdSound::VoteSongRequest* request, ::grpc::ServerAsyncResponseWriter< ::CrowdSound::VoteSongResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag);
  };
};

}  // namespace CrowdSound


#endif  // GRPC_proto_2fcrowdsound_5fservice_2eproto__INCLUDED
