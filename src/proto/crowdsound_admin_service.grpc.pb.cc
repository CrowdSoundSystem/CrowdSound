// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: proto/crowdsound_admin_service.proto

#include "proto/crowdsound_admin_service.pb.h"
#include "proto/crowdsound_admin_service.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>
namespace CrowdSound {

static const char* Admin_method_names[] = {
  "/CrowdSound.Admin/SkipStatus",
  "/CrowdSound.Admin/Skip",
};

std::unique_ptr< Admin::Stub> Admin::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Admin::Stub> stub(new Admin::Stub(channel));
  return stub;
}

Admin::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_SkipStatus_(Admin_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Skip_(Admin_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Admin::Stub::SkipStatus(::grpc::ClientContext* context, const ::CrowdSound::SkipStatusRequest& request, ::CrowdSound::SkipStatusResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SkipStatus_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::CrowdSound::SkipStatusResponse>* Admin::Stub::AsyncSkipStatusRaw(::grpc::ClientContext* context, const ::CrowdSound::SkipStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::CrowdSound::SkipStatusResponse>(channel_.get(), cq, rpcmethod_SkipStatus_, context, request);
}

::grpc::Status Admin::Stub::Skip(::grpc::ClientContext* context, const ::CrowdSound::SkipRequest& request, ::CrowdSound::SkipResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Skip_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::CrowdSound::SkipResponse>* Admin::Stub::AsyncSkipRaw(::grpc::ClientContext* context, const ::CrowdSound::SkipRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::CrowdSound::SkipResponse>(channel_.get(), cq, rpcmethod_Skip_, context, request);
}

Admin::AsyncService::AsyncService() : ::grpc::AsynchronousService(Admin_method_names, 2) {}

Admin::Service::~Service() {
  delete service_;
}

::grpc::Status Admin::Service::SkipStatus(::grpc::ServerContext* context, const ::CrowdSound::SkipStatusRequest* request, ::CrowdSound::SkipStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void Admin::AsyncService::RequestSkipStatus(::grpc::ServerContext* context, ::CrowdSound::SkipStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::CrowdSound::SkipStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status Admin::Service::Skip(::grpc::ServerContext* context, const ::CrowdSound::SkipRequest* request, ::CrowdSound::SkipResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void Admin::AsyncService::RequestSkip(::grpc::ServerContext* context, ::CrowdSound::SkipRequest* request, ::grpc::ServerAsyncResponseWriter< ::CrowdSound::SkipResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* Admin::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      Admin_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Admin::Service, ::CrowdSound::SkipStatusRequest, ::CrowdSound::SkipStatusResponse>(
          std::mem_fn(&Admin::Service::SkipStatus), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      Admin_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Admin::Service, ::CrowdSound::SkipRequest, ::CrowdSound::SkipResponse>(
          std::mem_fn(&Admin::Service::Skip), this)));
  return service_;
}


}  // namespace CrowdSound

